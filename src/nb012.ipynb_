{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"nb012.ipynb ","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMEabRE+o17nfzrOdj0MaB6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"FnmWIfr9vdGK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617625004584,"user_tz":-540,"elapsed":17596,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"9c11f92d-77aa-4ca9-b3bc-dc027a47e770"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Y-BLRcEexGLR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617625037315,"user_tz":-540,"elapsed":1332,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"389dff4b-88c9-434e-8801-cded15e0d1f2"},"source":["import os\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from matplotlib_venn import venn2\n","#from ptitprince import RainCloud\n","\n","from pandas_profiling import ProfileReport\n","%matplotlib inline\n","pd.set_option('display.max_rows', 50)\n","\n","print(os.getcwd())"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/content\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4j3OZyeIxG33","executionInfo":{"status":"ok","timestamp":1617625037816,"user_tz":-540,"elapsed":1831,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["from lightgbm import LGBMModel\n","from sklearn import model_selection\n","from sklearn.metrics import mean_squared_error\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","from tqdm import tqdm"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"oagkY0y3xOTN","executionInfo":{"status":"ok","timestamp":1617625039514,"user_tz":-540,"elapsed":3527,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["INPUT_DIR = '/content/drive/MyDrive/Colab Notebooks/Solafune/夜間光データから土地価格を予測/data/inputs/'\n","OUTPUT_DIR = '/content/drive/MyDrive/Colab Notebooks/Solafune/夜間光データから土地価格を予測/data/outputs/'\n","NB_NAME = 'nb012'\n","\n","os.makedirs(OUTPUT_DIR, exist_ok=True)\n","\n","train = pd.read_csv(os.path.join(INPUT_DIR, 'TrainDataSet.csv'))\n","test = pd.read_csv(os.path.join(INPUT_DIR, 'EvaluationData.csv'))\n","submission = pd.read_csv(os.path.join(INPUT_DIR, 'UploadFileTemplate.csv'))\n","target = train['AverageLandPrice']"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Pr6T8vaPlYQs"},"source":["# 前処理"]},{"cell_type":"code","metadata":{"id":"CsUPFR6u7pF5","executionInfo":{"status":"ok","timestamp":1617625039515,"user_tz":-540,"elapsed":3527,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# 面積を追加\n","def calc_area(input_df):\n","    output_df = input_df.copy()\n","    output_df['Area'] = input_df['SumLight'] / input_df['MeanLight']\n","    # 小数点以下でずれあるが、測定地域の面積は変わらないはずなので中央値に置き換え\n","    _mapping = output_df.groupby('PlaceID')['Area'].median()\n","    output_df['Area'] = output_df['PlaceID'].map(_mapping)\n","    # NaNがあるので0置き換え\n","    output_df['Area'] = output_df['Area'].fillna(0)\n","    return output_df"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"UE_r2xl3E5BA","executionInfo":{"status":"ok","timestamp":1617625039515,"user_tz":-540,"elapsed":3526,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["train = calc_area(train)\n","test = calc_area(test)"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"APdaobEolZ2P"},"source":["# 特徴量"]},{"cell_type":"code","metadata":{"id":"gH8HwrzRj7M1","executionInfo":{"status":"ok","timestamp":1617625039515,"user_tz":-540,"elapsed":3525,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["class BaseBlock(object):\n","    def fit(self, input_df, y=None):\n","        return self.transform(input_df)\n","\n","    def transform(self, input_df) -> pd.DataFrame:\n","        raise NotImplementedError()"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"8hBa3vO1P4tM","executionInfo":{"status":"ok","timestamp":1617625039516,"user_tz":-540,"elapsed":3525,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# count 63\n","class Count63Block(BaseBlock):\n","    def transform(self, input_df):\n","        output_df = pd.DataFrame()\n","        output_df['PlaceID'] = input_df['PlaceID'].copy()\n","\n","        _mapping = input_df[input_df['MeanLight'] == 63].groupby('PlaceID').size()\n","        output_df['count63'] = output_df['PlaceID'].map(_mapping).fillna(0)\n","        return output_df['count63']"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"j7PWj1jafiX6","executionInfo":{"status":"ok","timestamp":1617625039516,"user_tz":-540,"elapsed":3523,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# aggregationのagg_methodsで使用する関数群\n","# 分位点\n","def third_quartile(x):\n","    return x.quantile(0.75)\n","def first_quartile(x):\n","    return x.quantile(0.25)\n","def quartile_range(x):\n","    return x.quantile(0.75) - x.quantile(0.25)\n","\n","def max_min(x):\n","    return x.max() - x.min()"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"xwgQdDOsK6wv","executionInfo":{"status":"ok","timestamp":1617625039517,"user_tz":-540,"elapsed":3523,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# agg計算関数(xfeat.aggregation参照)\n","def aggregation(input_df, group_key, group_values, agg_methods):\n","    new_df = []\n","    for agg_method in agg_methods:\n","        for col in group_values:\n","            if callable(agg_method):\n","                agg_method_name = agg_method.__name__\n","            else:\n","                agg_method_name = agg_method\n","            new_col = f\"agg_{agg_method_name}_{col}_grpby_{group_key}\"\n","            df_agg = (input_df[[col] + [group_key]].groupby(group_key)[[col]].agg(agg_method))\n","            df_agg.columns = [new_col]\n","            new_df.append(df_agg)\n","            \n","    _df = pd.concat(new_df, axis=1).reset_index()\n","    output_df = pd.merge(input_df[[group_key]], _df, on=group_key, how=\"left\")\n","    return output_df.drop(group_key, axis=1)\n","\n","\n","# PlaceIDをキーにした集約特徴量\n","class AggPlaceIDBlock(BaseBlock):\n","    def __init__(self, group_values, agg_methods):\n","        self.group_values = group_values\n","        self.agg_methods = agg_methods\n","\n","    def transform(self, input_df):\n","        output_df = aggregation(input_df,\n","                               'PlaceID',\n","                                group_values=self.group_values,\n","                                agg_methods=self.agg_methods)\n","\n","        return output_df\n","\n","\n","# Year をキーにした集約特徴量\n","class AggYearBlock(BaseBlock):\n","    def __init__(self, group_values, agg_methods):\n","        self.group_values = group_values\n","        self.agg_methods = agg_methods\n","\n","    def transform(self, input_df):\n","        output_df = aggregation(input_df,\n","                               'Year',\n","                                group_values=self.group_values,\n","                                agg_methods=self.agg_methods)\n","        return output_df"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"AvqgiqVpr-Vh","executionInfo":{"status":"ok","timestamp":1617625039517,"user_tz":-540,"elapsed":3522,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# diff計算関数\n","def diff_aggregation(input_df, group_key, group_values, num_diffs):\n","    dfs = []\n","    for nd in num_diffs:\n","        _df = input_df.groupby(group_key)[group_values].diff(nd)\n","        _df.columns = [f'diff={nd}_{col}_grpby_{group_key}' for col in group_values]\n","        dfs.append(_df)\n","    output_df = pd.concat(dfs, axis=1)\n","    return output_df\n","\n","\n","# PlaceID をキーにしたグループ内差分(マイナスからプラスまで差の取り方いっぱいあるな)\n","class LagPlaceIDBlock(BaseBlock):\n","    def __init__(self, group_key, group_values, num_diffs):\n","        self.group_key = group_key\n","        self.group_values = group_values\n","        self.num_diffs = num_diffs\n","    \n","    def transform(self, input_df):\n","        output_df = diff_aggregation(input_df,\n","                                     group_key=self.group_key,\n","                                     group_values=self.group_values,\n","                                     num_diffs=self.num_diffs)\n","        return output_df"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"O0j4fo8RPwXv","executionInfo":{"status":"ok","timestamp":1617625039932,"user_tz":-540,"elapsed":3935,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# shift計算関数\n","def shift_aggregation(input_df, group_key, group_values, num_shifts):\n","    dfs = []\n","    for ns in num_shifts:\n","        _df = input_df.groupby(group_key)[group_values].shift(ns)\n","        _df.columns = [f'shift={ns}_{col}_grpby_{group_key}' for col in group_values]\n","        dfs.append(_df)\n","    output_df = pd.concat(dfs, axis=1)\n","    return output_df\n","\n","# PlaceID をキーにしたグループ内シフト\n","# あまり意味ないかもしれない？\n","class ShiftPlaceIDBlock(BaseBlock):\n","    def __init__(self, group_key, group_values, num_shifts):\n","        self.group_key = group_key\n","        self.group_values = group_values\n","        self.num_shifts = num_shifts\n","\n","    def transform(self, input_df):\n","        output_df = shift_aggregation(input_df,\n","                                      self.group_key,\n","                                      self.group_values,\n","                                      self.num_shifts)\n","        return output_df"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"maBVzlevPxlc","executionInfo":{"status":"ok","timestamp":1617625039932,"user_tz":-540,"elapsed":3933,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# PCAを単体でするときのコンポーネント数\n","COMPONENT = 16\n","\n","# 主性成分分析する\n","def make_vec_features(input_df, index, columns, values):\n","    all_pca_df = _all_df = pd.DataFrame()\n","    \n","    # valuesそれぞれでpivotしてpca\n","    for val in values:\n","        _df = pd.pivot_table(input_df, index=index, columns=columns, values=val).fillna(0).add_prefix(val + '=')\n","        _all_df = pd.concat([_all_df, _df], axis=1)\n","        sc_df = StandardScaler().fit_transform(_df.fillna(0))\n","        pca = PCA(n_components=COMPONENT, random_state=1993)\n","        pca_df = pd.DataFrame(pca.fit_transform(sc_df), index=_df.index).rename(columns=lambda x: f\"PlaceID_{val}_PCA_{x:03}\")\n","        all_pca_df = pd.concat([all_pca_df, pca_df], axis=1)\n","    # values全部でpca\n","    sc_all_df = StandardScaler().fit_transform(_all_df.fillna(0))\n","    pca = PCA(n_components=COMPONENT * (len(values)+1), random_state=1993)\n","    pca_df = pd.DataFrame(pca.fit_transform(sc_all_df), index=_all_df.index).rename(columns=lambda x:f\"PlaceID_All_PCA_{x:03}\")\n","\n","    all_pca_df= pd.concat([all_pca_df, pca_df], axis=1)\n","    output_df = pd.merge(input_df[[index]], all_pca_df, left_on=index, right_index=True, how='left')\n","    return output_df.drop('PlaceID', axis=1)\n","\n","# pivot tabel を用いた特徴量\n","class PlaceID2VecBlock(BaseBlock):\n","    def __init__(self, index, columns, values):\n","        self.index = index\n","        self.columns = columns\n","        self.values = values\n","\n","    def transform(self, input_df):\n","        return make_vec_features(input_df, self.index, self.columns, self.values)"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"6i8YlEihPy6_","executionInfo":{"status":"ok","timestamp":1617625039932,"user_tz":-540,"elapsed":3932,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# PlaceIDをキーにしたグループ内相関係数\n","class PlaceIDcorrBlock(BaseBlock):\n","    def __init__(self, group_key, group_values):\n","        self.group_key = group_key\n","        self.group_values = group_values\n","\n","    def transform(self, input_df):\n","        dfs = []\n","        for gv in self.group_values:\n","            _df = input_df.groupby(self.group_key)[gv].corr().unstack().iloc[:, 1].rename(f\"Corr={gv[0]}-{gv[1]}\")\n","            dfs.append(pd.DataFrame(_df))\n","        dfs = pd.concat(dfs, axis=1)\n","        output_df = pd.merge(input_df[[self.group_key]], dfs, left_on=self.group_key, right_index=True, how='left').drop(self.group_key, axis=1)\n","        return output_df      "],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"PZ_7Px7LkAYA","executionInfo":{"status":"ok","timestamp":1617625039933,"user_tz":-540,"elapsed":3932,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# 各特徴量同士の四則演算?"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"delO9TMY2J5C","executionInfo":{"status":"ok","timestamp":1617625039933,"user_tz":-540,"elapsed":3931,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["#SumLightとAreaを順位付け\n","class RankBlock(BaseBlock):\n","    def transform(self, input_df):\n","        _df = []\n","        sumli_rank_df = input_df.groupby('PlaceID')['SumLight'].mean().rank(ascending=False)\n","        area_rank_df = input_df.groupby('PlaceID')['Area'].mean().rank()\n","        _df = pd.concat([sumli_rank_df, area_rank_df], axis=1)\n","        _df.columns = ['SumLight_rank', 'Area_rank']\n","        _df['AreaSumLig_rank'] = ( sumli_rank_df + area_rank_df ) / 2.0\n","\n","        output_df = pd.merge(input_df[['PlaceID']], _df, left_on='PlaceID', right_index=True, how='left')\n","        return output_df.drop('PlaceID', axis=1)"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"IWDBTsRzwbBk","executionInfo":{"status":"ok","timestamp":1617625039933,"user_tz":-540,"elapsed":3930,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# binning\n","class BinningBlock(BaseBlock):\n","    def __init__(self, num_bin, group_key, group_values):\n","        self.num_bin = num_bin\n","        self.group_key = group_key\n","        self.group_values = group_values\n","\n","    def transform(self, input_df):\n","        new_df = []\n","        for gv in self.group_values:\n","            _mean_df = input_df.groupby(self.group_key)[[gv]].mean()\n","            bin = pd.cut(_mean_df[gv], self.num_bin, labels=False).rename(f'Bin_{gv}')\n","            new_df.append(bin)\n","\n","        _df = pd.concat(new_df, axis=1).reset_index()\n","        output_df = pd.merge(input_df[[self.group_key]], _df, on=self.group_key, how='left')\n","        return output_df.drop(self.group_key, axis=1)"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"78sazm9FIHLS","executionInfo":{"status":"ok","timestamp":1617627753304,"user_tz":-540,"elapsed":642,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"24fd29be-aaa2-42c0-9d29-ee9870f87ef7","colab":{"base_uri":"https://localhost:8080/","height":406}},"source":["train_feat_df.filter(like='Bin')"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Bin_Area</th>\n","      <th>Bin_SumLight</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>21878</th>\n","      <td>3</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>21879</th>\n","      <td>3</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>21880</th>\n","      <td>3</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>21881</th>\n","      <td>3</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>21882</th>\n","      <td>3</td>\n","      <td>14</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>21883 rows × 2 columns</p>\n","</div>"],"text/plain":["       Bin_Area  Bin_SumLight\n","0             0             5\n","1             0             5\n","2             0             5\n","3             0             5\n","4             0             5\n","...         ...           ...\n","21878         3            14\n","21879         3            14\n","21880         3            14\n","21881         3            14\n","21882         3            14\n","\n","[21883 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"id":"QebuC3aX43Bk","executionInfo":{"status":"ok","timestamp":1617625039934,"user_tz":-540,"elapsed":3929,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# sum_mean_df = train.groupby('PlaceID')[['SumLight']].mean()\n","# area_mean_df = train.groupby('PlaceID')[['Area']].mean()\n","# df_mean = pd.merge(sum_mean_df, area_mean_df, on='PlaceID', how='left')\n","# df_mean.columns = ['SumLight_mean', 'Area_mean']\n","\n","# bin = pd.cut(df_mean['SumLight_mean'], 10, labels=False).rename('aaa')\n","\n","# #df_mean = pd.merge(train[['PlaceID']], df, on='PlaceID', how='left')\n","\n","# #df.columns = ['SumLight_mean', 'Area_mean']\n","# bin\n","# # a = pd.DataFrame(bin)\n","# # a.columns=['bin_SumLight_mean']\n","# # a"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"dPSXCfoi6-K1","executionInfo":{"status":"ok","timestamp":1617625039934,"user_tz":-540,"elapsed":3928,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# bi = BinningBlock(100, 'PlaceID', ['SumLight', 'Area'])\n","# result = bi.transform(train)\n","# result.head(50)"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"id":"hdUZzcoyq2yp","executionInfo":{"status":"ok","timestamp":1617625039934,"user_tz":-540,"elapsed":3927,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# そのまま使う特徴量\n","class WrapperBlock(BaseBlock):\n","    def __init__(self, function):\n","        self.function = function\n","\n","    def transform(self, input_df):\n","        return self.function(input_df)\n","\n","def origin_features(input_df):\n","    use_columns = [\n","        'Year',\n","        'MeanLight',\n","        'SumLight',\n","        'Area'\n","    ]\n","    return input_df[use_columns]"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"id":"ol1AYDYaCg38","executionInfo":{"status":"ok","timestamp":1617625039934,"user_tz":-540,"elapsed":3926,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["from contextlib import contextmanager\n","from time import time\n","\n","@contextmanager\n","def timer(logger=None,format_str='{:.3f}[s]',prefix=None,suffix=None):\n","    if prefix: format_str = str(prefix) + format_str\n","    if suffix: format_str = format_str + str(suffix)\n","    start = time()\n","    yield\n","    d = time()-start\n","    out_str = format_str.format(d)\n","    if logger:\n","        logger.info(out_str)\n","    else:\n","        print(out_str)"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"MvfsIFr6eXee","executionInfo":{"status":"ok","timestamp":1617625039935,"user_tz":-540,"elapsed":3926,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["from tqdm import tqdm\n","\n","def get_function(block, is_train):\n","    s = mapping = {\n","        True: 'fit',\n","        False: 'transform'\n","    }.get(is_train)\n","    return getattr(block, s)\n","\n","def to_feature(input_df, blocks, is_train=False):\n","    output_df = pd.DataFrame()\n","\n","    for block in tqdm(blocks, total=len(blocks)):\n","        func = get_function(block, is_train)\n","\n","        with timer(prefix='create' + str(block) + ' '):\n","            _df = func(input_df)\n","\n","        assert len(_df) == len(input_df), func.__name__\n","        output_df = pd.concat([output_df, _df], axis=1)\n","\n","    return output_df"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KVd6rgWSUxL3","executionInfo":{"status":"ok","timestamp":1617625039935,"user_tz":-540,"elapsed":3920,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"1b60ab4a-5d5b-4009-eb77-27ceb5f59b7a"},"source":["print(len(train['Area'].value_counts()))\n","print(len(train['SumLight'].value_counts()))"],"execution_count":23,"outputs":[{"output_type":"stream","text":["924\n","6981\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KRDgse1x9p1X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617625064202,"user_tz":-540,"elapsed":28183,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"f25c46ab-90fd-41fc-a4e6-0e9ee8e1616d"},"source":["agg_methods = [\"min\", \"max\", \"median\", \"mean\", \"std\", max_min, third_quartile, first_quartile, quartile_range]\n","\n","num_diffs = range(1, 22)\n","num_shifts = range(1, 22)\n","group_vlaues = [\n","    [\"Year\", \"MeanLight\"],\n","    [\"Year\", \"SumLight\"],\n","    [\"Year\", \"Area\"],\n","]         \n","\n","process_blocks = [\n","    WrapperBlock(origin_features),\n","    Count63Block(),\n","    AggPlaceIDBlock([\"MeanLight\", \"SumLight\", \"Area\"], agg_methods),\n","    AggYearBlock([\"MeanLight\", \"SumLight\", \"Area\"], agg_methods),\n","    LagPlaceIDBlock('PlaceID', [\"MeanLight\", \"SumLight\"], num_diffs),\n","    ShiftPlaceIDBlock('PlaceID', [\"MeanLight\", \"SumLight\"], num_shifts),\n","    PlaceID2VecBlock(\"PlaceID\", \"Year\", [\"Area\", \"MeanLight\", \"SumLight\"]),\n","    PlaceIDcorrBlock(\"PlaceID\", group_vlaues),\n","    RankBlock(),\n","    BinningBlock(80, \"PlaceID\", [\"Area\"]),\n","    BinningBlock(500, \"PlaceID\", [\"SumLight\"]),\n","]\n","\n","train_feat_df = to_feature(train, process_blocks, is_train=True)\n","test_feat_df = to_feature(test, process_blocks, is_train=False)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/11 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.WrapperBlock object at 0x7fab768accd0> 0.003[s]\n","create<__main__.Count63Block object at 0x7fab768ac550> 0.009[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 27%|██▋       | 3/11 [00:07<00:18,  2.35s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.AggPlaceIDBlock object at 0x7fab768ac750> 7.021[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 36%|███▋      | 4/11 [00:07<00:12,  1.72s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.AggYearBlock object at 0x7fab768ac650> 0.266[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 45%|████▌     | 5/11 [00:13<00:18,  3.08s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.LagPlaceIDBlock object at 0x7fab768ac250> 6.224[s]\n","create<__main__.ShiftPlaceIDBlock object at 0x7fab7b3858d0> 0.076[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 64%|██████▎   | 7/11 [00:14<00:08,  2.22s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.PlaceID2VecBlock object at 0x7fab768ac450> 0.308[s]\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 11/11 [00:15<00:00,  1.40s/it]\n","  0%|          | 0/11 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.PlaceIDcorrBlock object at 0x7fab768ac850> 1.209[s]\n","create<__main__.RankBlock object at 0x7fab768ac510> 0.013[s]\n","create<__main__.BinningBlock object at 0x7fab768ac9d0> 0.008[s]\n","create<__main__.BinningBlock object at 0x7fab768acf50> 0.009[s]\n","create<__main__.WrapperBlock object at 0x7fab768accd0> 0.001[s]\n","create<__main__.Count63Block object at 0x7fab768ac550> 0.006[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 27%|██▋       | 3/11 [00:04<00:11,  1.43s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.AggPlaceIDBlock object at 0x7fab768ac750> 4.287[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 36%|███▋      | 4/11 [00:04<00:07,  1.08s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.AggYearBlock object at 0x7fab768ac650> 0.252[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 45%|████▌     | 5/11 [00:08<00:10,  1.81s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.LagPlaceIDBlock object at 0x7fab768ac250> 3.498[s]\n","create<__main__.ShiftPlaceIDBlock object at 0x7fab7b3858d0> 0.062[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 64%|██████▎   | 7/11 [00:08<00:05,  1.31s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.PlaceID2VecBlock object at 0x7fab768ac450> 0.174[s]\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 11/11 [00:09<00:00,  1.19it/s]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.PlaceIDcorrBlock object at 0x7fab768ac850> 0.792[s]\n","create<__main__.RankBlock object at 0x7fab768ac510> 0.010[s]\n","create<__main__.BinningBlock object at 0x7fab768ac9d0> 0.007[s]\n","create<__main__.BinningBlock object at 0x7fab768acf50> 0.008[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AzgwHGM6tGi3","executionInfo":{"status":"ok","timestamp":1617625064580,"user_tz":-540,"elapsed":28557,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"d3704c02-ddc0-49cd-a62f-3e6fdf51de59"},"source":["train_feat_df.columns"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Year', 'MeanLight', 'SumLight', 'Area', 'count63',\n","       'agg_min_MeanLight_grpby_PlaceID', 'agg_min_SumLight_grpby_PlaceID',\n","       'agg_min_Area_grpby_PlaceID', 'agg_max_MeanLight_grpby_PlaceID',\n","       'agg_max_SumLight_grpby_PlaceID',\n","       ...\n","       'PlaceID_All_PCA_062', 'PlaceID_All_PCA_063', 'Corr=Year-MeanLight',\n","       'Corr=Year-SumLight', 'Corr=Year-Area', 'SumLight_rank', 'Area_rank',\n","       'AreaSumLig_rank', 'Bin_Area', 'Bin_SumLight'],\n","      dtype='object', length=263)"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VzEF8L4bQYoo","executionInfo":{"status":"ok","timestamp":1617625064580,"user_tz":-540,"elapsed":28553,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"961df3e0-99ba-4d7e-b548-9d93ac663162"},"source":["train_feat_df.shape"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(21883, 263)"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"eEIzhVw8c9DM","executionInfo":{"status":"ok","timestamp":1617625064581,"user_tz":-540,"elapsed":28551,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# GroupKFold\n","from sklearn.model_selection import GroupKFold\n","fold = GroupKFold(n_splits=5)\n","cv = list(fold.split(train,target,train['PlaceID']))"],"execution_count":27,"outputs":[]},{"cell_type":"code","metadata":{"id":"67OzIsH_de4D","executionInfo":{"status":"ok","timestamp":1617625064581,"user_tz":-540,"elapsed":28550,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# RMSLE → RMSE\n","y = np.log1p(target)"],"execution_count":28,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-nL7KM4VlViv"},"source":["# Model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M00UW7TVfnmG","executionInfo":{"status":"ok","timestamp":1617625075321,"user_tz":-540,"elapsed":39285,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"61dba463-84a0-43b8-814e-2dc4ef84c998"},"source":["!pip install catboost"],"execution_count":29,"outputs":[{"output_type":"stream","text":["Collecting catboost\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1e/21/d1718eb4c93d6bacdd540b3792187f32ccb1ad9c51b9c4f10875d63ec176/catboost-0.25-cp37-none-manylinux1_x86_64.whl (67.3MB)\n","\u001b[K     |████████████████████████████████| 67.3MB 43kB/s \n","\u001b[?25hRequirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from catboost) (1.15.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from catboost) (3.2.2)\n","Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.1.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from catboost) (1.4.1)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from catboost) (4.4.1)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from catboost) (0.10.1)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.19.5)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (1.3.1)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (2.8.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (0.10.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (2.4.7)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2018.9)\n","Requirement already satisfied: retrying>=1.3.3 in /usr/local/lib/python3.7/dist-packages (from plotly->catboost) (1.3.3)\n","Installing collected packages: catboost\n","Successfully installed catboost-0.25\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9y83a_GUfRoP","executionInfo":{"status":"ok","timestamp":1617625075322,"user_tz":-540,"elapsed":39285,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["import lightgbm as lgb\n","import xgboost as xgb\n","from catboost import CatBoost\n","from catboost import Pool\n","from sklearn.metrics import mean_squared_error\n","from sklearn.linear_model import Ridge"],"execution_count":30,"outputs":[]},{"cell_type":"code","metadata":{"id":"AdAzjYUufS3X","executionInfo":{"status":"ok","timestamp":1617625075322,"user_tz":-540,"elapsed":39284,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["from abc import abstractmethod\n","class Base_Model(object):\n","    @abstractmethod\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        raise NotImplementedError\n","\n","    @abstractmethod\n","    def predict(self, model, features):\n","        raise NotImplementedError\n","\n","    def cv(self, y_train, train_features, test_features, fold_ids):\n","        test_preds = np.zeros(len(test_features))\n","        oof_preds = np.zeros(len(train_features))\n","\n","        for i_fold, (trn_idx, val_idx) in enumerate(fold_ids):\n","            x_trn = train_features.iloc[trn_idx]\n","            y_trn = y_train[trn_idx]\n","            x_val = train_features.iloc[val_idx]\n","            y_val = y_train[val_idx]\n","\n","            with timer(prefix=f'fit fold={i_fold}'):\n","                model = self.fit(x_trn, y_trn, x_val, y_val)\n","\n","            oof_preds[val_idx] = self.predict(model, x_val)\n","            oof_score = np.sqrt(mean_squared_error(y_val, oof_preds[val_idx]))\n","            print('fold{}:RMSLE{}'.format(i_fold, oof_score))\n","            test_preds += self.predict(model, test_features) / len(fold_ids)\n","\n","        oof_score = np.sqrt(mean_squared_error(y_train, oof_preds))\n","        print(f'oof score: {oof_score}')\n","\n","        evals_results = {\"evals_result\": {\n","            \"oof_score\": oof_score,\n","            \"n_data\": len(train_features),\n","            \"n_features\": len(train_features.columns),\n","        }}\n","\n","        return oof_preds, test_preds, evals_results"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"3jgxxQMFfmg7","executionInfo":{"status":"ok","timestamp":1617625075322,"user_tz":-540,"elapsed":39283,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["cat_col = []\n","class Lgbm(Base_Model):\n","    def __init__(self, model_params):\n","        self.model_params = model_params\n","        self.models = []\n","        self.feature_cols = None\n","\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        lgb_train = lgb.Dataset(x_train, y_train)\n","        lgb_valid = lgb.Dataset(x_valid, y_valid)\n","\n","        model = lgb.train(self.model_params,\n","            train_set=lgb_train,\n","            valid_sets=[lgb_valid],\n","            valid_names=['valid'],\n","            categorical_feature=cat_col,\n","            early_stopping_rounds=100,\n","            num_boost_round=10000,\n","            verbose_eval=False)\n","        self.models.append(model)\n","        return model\n","\n","    def predict(self, model, features):\n","        self.feature_cols = features.columns\n","        return model.predict(features)\n","\n","    def visualize_importance(self):\n","        feature_importance_df = pd.DataFrame()\n","\n","        for i,model in enumerate(self.models):\n","            _df = pd.DataFrame()\n","            _df['feature_importance'] = model.feature_importance(importance_type='gain')\n","            _df['column'] = self.feature_cols\n","            _df['fold'] = i+1\n","            feature_importance_df = pd.concat([feature_importance_df, _df],axis=0, ignore_index=True)\n","\n","        order = feature_importance_df.groupby('column').sum()[['feature_importance']].sort_values('feature_importance', ascending=False).index[:50]\n","\n","        fig, ax = plt.subplots(figsize=(max(6, len(order) * .4), 7))\n","        sns.boxenplot(data=feature_importance_df, x='column', y='feature_importance', order=order, ax=ax, palette='viridis')\n","        ax.tick_params(axis='x', rotation=90)\n","        ax.grid()\n","        fig.tight_layout()\n","        return fig,ax\n","\n","class Cat(Base_Model):\n","    def __init__(self, model_params):\n","        self.model_params = model_params\n","        \n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        train_pool = Pool(x_train,\n","                          label=y_train,\n","                          cat_features=cat_col)\n","        valid_pool = Pool(x_valid,\n","                          label=y_valid,\n","                          cat_features=cat_col)\n","\n","        model = CatBoost(self.model_params)\n","        model.fit(train_pool,\n","                  early_stopping_rounds=100,\n","                 plot=False,\n","                 use_best_model=True,\n","                 eval_set=[valid_pool],\n","                  verbose=False)\n","\n","        return model\n","\n","    def predict(self, model, features):\n","      pred = model.predict(features)\n","      return pred\n","\n","class Xgb(Base_Model):\n","    def __init__(self,model_params):\n","        self.model_params = model_params\n","\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        xgb_train = xgb.DMatrix(x_train, label=y_train)\n","        xgb_valid = xgb.DMatrix(x_valid, label=y_valid)\n","\n","        evals = [(xgb_train, 'train'),(xgb_valid, 'eval')]\n","\n","        model = xgb.train(self.model_params,\n","                         xgb_train,\n","                         num_boost_round=2000,\n","                         early_stopping_rounds=100,\n","                         evals=evals,\n","                         verbose_eval=False)\n","\n","        return model\n","\n","    def predict(self, model, features):\n","        return model.predict(xgb.DMatrix(features))\n","\n","class Rid(Base_Model):\n","    def __init__(self):\n","      self.model = None\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        model =Ridge(\n","            alpha=1, #L2係数\n","            max_iter=1000,\n","            random_state=10,\n","                              )\n","        model.fit(x_train, y_train)\n","        return model\n","\n","    def predict(self,model, features):\n","      return model.predict(features)"],"execution_count":32,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VKh8E0relQ5b"},"source":["# Learning"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sxcr5_p0gMc5","executionInfo":{"status":"ok","timestamp":1617625470824,"user_tz":-540,"elapsed":434779,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"484df214-9c98-4a91-ac9e-737a3c92dffb"},"source":["cat_col =[]\n","cat_params = {\n","    'loss_function': 'RMSE',\n","    'num_boost_round': 10000,\n","    'depth':6\n","}\n","\n","cat_model = Cat(cat_params)\n","oof_preds_cat, test_preds_cat, evals_results_cat = cat_model.cv(\n","    y, train_feat_df, test_feat_df, cv\n",")"],"execution_count":33,"outputs":[{"output_type":"stream","text":["fit fold=042.810[s]\n","fold0:RMSLE0.5466591318498579\n","fit fold=143.051[s]\n","fold1:RMSLE0.5279998659753112\n","fit fold=2129.761[s]\n","fold2:RMSLE0.5902096630545851\n","fit fold=364.725[s]\n","fold3:RMSLE0.5157029281268644\n","fit fold=4114.333[s]\n","fold4:RMSLE0.5695367510291269\n","oof score: 0.5506886415691123\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yyixUJg3kZeQ","executionInfo":{"status":"ok","timestamp":1617625653830,"user_tz":-540,"elapsed":617780,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"a156e6b4-6f3d-4292-a8f4-fe7ebb31e491"},"source":["lgbm_params = {\n","    \"boosting_type\": \"gbdt\",\n","    'objective': 'regression',\n","    'metric': 'rmse',\n","    'max_depth': 6,\n","    'n_estimators': 10000,\n","    'num_leaves':31,\n","    'learning_rate':0.01,\n","    'colsample_bytree': .5,\n","    \"verbose\":-1\n","}\n","\n","lgbm_model = Lgbm(lgbm_params)\n","oof_preds_lgb, test_preds_lgb, evals_results_lgb = lgbm_model.cv(\n","    y, train_feat_df, test_feat_df, cv\n",")"],"execution_count":34,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=014.434[s]\n","fold0:RMSLE0.5444584572894425\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=125.947[s]\n","fold1:RMSLE0.526638421567693\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=273.712[s]\n","fold2:RMSLE0.5836307808986217\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=325.094[s]\n","fold3:RMSLE0.5021389655989562\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=438.230[s]\n","fold4:RMSLE0.5622696262554797\n","oof score: 0.5445545896589362\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UoHxJ6sxlCbk","executionInfo":{"status":"ok","timestamp":1617625722216,"user_tz":-540,"elapsed":686161,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"fd1ba9cd-ae79-4a24-c7b3-89a52cbd4e1f"},"source":["xgb_params = {\n","    'max_depth': 6,\n","    'lambda':10, \n","    'objective': 'reg:squarederror',\n","    'eval_metric':'rmse',\n","    'tree_method':'gpu_hist',\n","    'learning_rate':0.01\n","}\n","\n","xgb_model = Xgb(xgb_params)\n","oof_preds_xgb, test_preds_xgb, evals_results_xgb = xgb_model.cv(\n","    y, train_feat_df, test_feat_df, cv\n",")"],"execution_count":35,"outputs":[{"output_type":"stream","text":["fit fold=09.545[s]\n","fold0:RMSLE0.5581732938673387\n","fit fold=112.612[s]\n","fold1:RMSLE0.5266778471145436\n","fit fold=213.706[s]\n","fold2:RMSLE0.5927512659069215\n","fit fold=313.122[s]\n","fold3:RMSLE0.5040486972694544\n","fit fold=417.685[s]\n","fold4:RMSLE0.5744510998657987\n","oof score: 0.5521522867025844\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"13f8dZsClLWw"},"source":["# Stacking"]},{"cell_type":"code","metadata":{"id":"7WkVoaXqlJNU","executionInfo":{"status":"ok","timestamp":1617625723940,"user_tz":-540,"elapsed":687884,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["stack_train_df = pd.DataFrame([oof_preds_cat, oof_preds_lgb, oof_preds_xgb]).T\n","stack_test_df = pd.DataFrame([test_preds_cat, test_preds_lgb, test_preds_lgb]).T"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"__yxuNbQltN-","executionInfo":{"status":"ok","timestamp":1617625723942,"user_tz":-540,"elapsed":687882,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"8deaf29d-5efc-4725-eeac-8fc341062e43"},"source":["stack_model = Rid()\n","oof_preds_stack, test_preds_stack, evals_results_stack = stack_model.cv(\n","    y, stack_train_df, stack_test_df, cv\n",")"],"execution_count":37,"outputs":[{"output_type":"stream","text":["fit fold=00.004[s]\n","fold0:RMSLE0.5441318608723573\n","fit fold=10.002[s]\n","fold1:RMSLE0.5206364468712907\n","fit fold=20.002[s]\n","fold2:RMSLE0.581068490828753\n","fit fold=30.002[s]\n","fold3:RMSLE0.5029436342405432\n","fit fold=40.002[s]\n","fold4:RMSLE0.5614017280357289\n","oof score: 0.5427535815514932\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"2KyN-dKmlxsm","executionInfo":{"status":"ok","timestamp":1617625725678,"user_tz":-540,"elapsed":689614,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"3ea17493-78e1-46b1-99df-ded613534f6b"},"source":["fig, ax = plt.subplots(figsize=(8,8))\n","sns.histplot(y, label='target', kde=True, stat='density', common_norm=False, alpha=0.3, color='orange')\n","sns.histplot(test_preds_stack, label='test_pred', kde=True, stat='density', common_norm=False, alpha=0.3)\n","sns.histplot(oof_preds_stack, label='train_pred', kde=True, stat='density', common_norm=False, alpha=0.3, color='red')\n","ax.legend()\n","ax.grid()"],"execution_count":38,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":548},"id":"BV5tckxTpFGM","executionInfo":{"status":"ok","timestamp":1617625726691,"user_tz":-540,"elapsed":690622,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"dd85e280-d45f-4a3d-8222-0d6aa5e08c64"},"source":["lgbm_model.visualize_importance()"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<Figure size 1440x504 with 1 Axes>,\n"," <matplotlib.axes._subplots.AxesSubplot at 0x7fab74d49310>)"]},"metadata":{"tags":[]},"execution_count":39},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x504 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"dEOx8IoRpKx6","executionInfo":{"status":"ok","timestamp":1617625727408,"user_tz":-540,"elapsed":691337,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["y_sub = np.expm1(test_preds_stack)\n","submission['LandPrice'] = y_sub\n","\n","submission.to_csv(os.path.join(OUTPUT_DIR, 'sub_' + NB_NAME + '.csv'), index=False)"],"execution_count":40,"outputs":[]},{"cell_type":"code","metadata":{"id":"SGiehgJRqOji","executionInfo":{"status":"ok","timestamp":1617625727408,"user_tz":-540,"elapsed":691336,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":[""],"execution_count":40,"outputs":[]}]}