{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"nb014.ipynb ","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPhiU+Y1IwQk3cFI+64LKxC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"FnmWIfr9vdGK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617631774320,"user_tz":-540,"elapsed":17648,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"58db0628-4211-4132-d7af-3ad7815867f0"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Y-BLRcEexGLR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617632496674,"user_tz":-540,"elapsed":697,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"b9f5580f-bef5-43cd-c77a-b1d95621714d"},"source":["import os\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from matplotlib_venn import venn2\n","#from ptitprince import RainCloud\n","\n","from pandas_profiling import ProfileReport\n","%matplotlib inline\n","pd.set_option('display.max_rows', 50)\n","\n","print(os.getcwd())"],"execution_count":37,"outputs":[{"output_type":"stream","text":["/content\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4j3OZyeIxG33","executionInfo":{"status":"ok","timestamp":1617632497710,"user_tz":-540,"elapsed":1727,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["from lightgbm import LGBMModel\n","from sklearn import model_selection\n","from sklearn.metrics import mean_squared_error\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","from tqdm import tqdm"],"execution_count":38,"outputs":[]},{"cell_type":"code","metadata":{"id":"oagkY0y3xOTN","executionInfo":{"status":"ok","timestamp":1617632497710,"user_tz":-540,"elapsed":1722,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["INPUT_DIR = '/content/drive/MyDrive/Colab Notebooks/Solafune/夜間光データから土地価格を予測/data/inputs/'\n","OUTPUT_DIR = '/content/drive/MyDrive/Colab Notebooks/Solafune/夜間光データから土地価格を予測/data/outputs/'\n","NB_NAME = 'nb014'\n","\n","os.makedirs(OUTPUT_DIR, exist_ok=True)\n","\n","train = pd.read_csv(os.path.join(INPUT_DIR, 'TrainDataSet.csv'))\n","test = pd.read_csv(os.path.join(INPUT_DIR, 'EvaluationData.csv'))\n","submission = pd.read_csv(os.path.join(INPUT_DIR, 'UploadFileTemplate.csv'))\n","target = train['AverageLandPrice']"],"execution_count":39,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Pr6T8vaPlYQs"},"source":["# 前処理"]},{"cell_type":"code","metadata":{"id":"CsUPFR6u7pF5","executionInfo":{"status":"ok","timestamp":1617632497710,"user_tz":-540,"elapsed":1720,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# 面積を追加\n","def calc_area(input_df):\n","    output_df = input_df.copy()\n","    output_df['Area'] = input_df['SumLight'] / input_df['MeanLight']\n","    # 小数点以下でずれあるが、測定地域の面積は変わらないはずなので中央値に置き換え\n","    _mapping = output_df.groupby('PlaceID')['Area'].median()\n","    output_df['Area'] = output_df['PlaceID'].map(_mapping)\n","    # NaNがあるので0置き換え\n","    output_df['Area'] = output_df['Area'].fillna(0)\n","    return output_df"],"execution_count":40,"outputs":[]},{"cell_type":"code","metadata":{"id":"UE_r2xl3E5BA","executionInfo":{"status":"ok","timestamp":1617632497711,"user_tz":-540,"elapsed":1718,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["train = calc_area(train)\n","test = calc_area(test)"],"execution_count":41,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"APdaobEolZ2P"},"source":["# 特徴量"]},{"cell_type":"code","metadata":{"id":"gH8HwrzRj7M1","executionInfo":{"status":"ok","timestamp":1617632497711,"user_tz":-540,"elapsed":1716,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["class BaseBlock(object):\n","    def fit(self, input_df, y=None):\n","        return self.transform(input_df)\n","\n","    def transform(self, input_df) -> pd.DataFrame:\n","        raise NotImplementedError()"],"execution_count":42,"outputs":[]},{"cell_type":"code","metadata":{"id":"8hBa3vO1P4tM","executionInfo":{"status":"ok","timestamp":1617632497713,"user_tz":-540,"elapsed":1715,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# count 63\n","class Count63Block(BaseBlock):\n","    def transform(self, input_df):\n","        output_df = pd.DataFrame()\n","        output_df['PlaceID'] = input_df['PlaceID'].copy()\n","\n","        _mapping = input_df[input_df['MeanLight'] == 63].groupby('PlaceID').size()\n","        output_df['count63'] = output_df['PlaceID'].map(_mapping).fillna(0)\n","        return output_df['count63']"],"execution_count":43,"outputs":[]},{"cell_type":"code","metadata":{"id":"j7PWj1jafiX6","executionInfo":{"status":"ok","timestamp":1617632497713,"user_tz":-540,"elapsed":1713,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# aggregationのagg_methodsで使用する関数群\n","# 分位点\n","def third_quartile(x):\n","    return x.quantile(0.75)\n","def first_quartile(x):\n","    return x.quantile(0.25)\n","def quartile_range(x):\n","    return x.quantile(0.75) - x.quantile(0.25)\n","\n","def max_min(x):\n","    return x.max() - x.min()"],"execution_count":44,"outputs":[]},{"cell_type":"code","metadata":{"id":"xwgQdDOsK6wv","executionInfo":{"status":"ok","timestamp":1617632497713,"user_tz":-540,"elapsed":1711,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# agg計算関数(xfeat.aggregation参照)\n","def aggregation(input_df, group_key, group_values, agg_methods):\n","    new_df = []\n","    for agg_method in agg_methods:\n","        for col in group_values:\n","            if callable(agg_method):\n","                agg_method_name = agg_method.__name__\n","            else:\n","                agg_method_name = agg_method\n","            new_col = f\"agg_{agg_method_name}_{col}_grpby_{group_key}\"\n","            df_agg = (input_df[[col] + [group_key]].groupby(group_key)[[col]].agg(agg_method))\n","            df_agg.columns = [new_col]\n","            new_df.append(df_agg)\n","            \n","    _df = pd.concat(new_df, axis=1).reset_index()\n","    output_df = pd.merge(input_df[[group_key]], _df, on=group_key, how=\"left\")\n","    return output_df.drop(group_key, axis=1)\n","\n","\n","# PlaceIDをキーにした集約特徴量\n","class AggPlaceIDBlock(BaseBlock):\n","    def __init__(self, group_values, agg_methods):\n","        self.group_values = group_values\n","        self.agg_methods = agg_methods\n","\n","    def transform(self, input_df):\n","        output_df = aggregation(input_df,\n","                               'PlaceID',\n","                                group_values=self.group_values,\n","                                agg_methods=self.agg_methods)\n","\n","        return output_df\n","\n","\n","# Year をキーにした集約特徴量\n","class AggYearBlock(BaseBlock):\n","    def __init__(self, group_values, agg_methods):\n","        self.group_values = group_values\n","        self.agg_methods = agg_methods\n","\n","    def transform(self, input_df):\n","        output_df = aggregation(input_df,\n","                               'Year',\n","                                group_values=self.group_values,\n","                                agg_methods=self.agg_methods)\n","        return output_df"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"id":"AvqgiqVpr-Vh","executionInfo":{"status":"ok","timestamp":1617632497713,"user_tz":-540,"elapsed":1708,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# diff計算関数\n","def diff_aggregation(input_df, group_key, group_values, num_diffs):\n","    dfs = []\n","    for nd in num_diffs:\n","        _df = input_df.groupby(group_key)[group_values].diff(nd)\n","        _df.columns = [f'diff={nd}_{col}_grpby_{group_key}' for col in group_values]\n","        dfs.append(_df)\n","    output_df = pd.concat(dfs, axis=1)\n","    return output_df\n","\n","\n","# PlaceID をキーにしたグループ内差分(マイナスからプラスまで差の取り方いっぱいあるな)\n","class LagPlaceIDBlock(BaseBlock):\n","    def __init__(self, group_key, group_values, num_diffs):\n","        self.group_key = group_key\n","        self.group_values = group_values\n","        self.num_diffs = num_diffs\n","    \n","    def transform(self, input_df):\n","        output_df = diff_aggregation(input_df,\n","                                     group_key=self.group_key,\n","                                     group_values=self.group_values,\n","                                     num_diffs=self.num_diffs)\n","        return output_df"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"id":"O0j4fo8RPwXv","executionInfo":{"status":"ok","timestamp":1617632497714,"user_tz":-540,"elapsed":1707,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# shift計算関数\n","def shift_aggregation(input_df, group_key, group_values, num_shifts):\n","    dfs = []\n","    for ns in num_shifts:\n","        _df = input_df.groupby(group_key)[group_values].shift(ns)\n","        _df.columns = [f'shift={ns}_{col}_grpby_{group_key}' for col in group_values]\n","        dfs.append(_df)\n","    output_df = pd.concat(dfs, axis=1)\n","    return output_df\n","\n","# PlaceID をキーにしたグループ内シフト\n","# あまり意味ないかもしれない？\n","class ShiftPlaceIDBlock(BaseBlock):\n","    def __init__(self, group_key, group_values, num_shifts):\n","        self.group_key = group_key\n","        self.group_values = group_values\n","        self.num_shifts = num_shifts\n","\n","    def transform(self, input_df):\n","        output_df = shift_aggregation(input_df,\n","                                      self.group_key,\n","                                      self.group_values,\n","                                      self.num_shifts)\n","        return output_df"],"execution_count":47,"outputs":[]},{"cell_type":"code","metadata":{"id":"maBVzlevPxlc","executionInfo":{"status":"ok","timestamp":1617632497714,"user_tz":-540,"elapsed":1705,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# PCAを単体でするときのコンポーネント数\n","COMPONENT = 16\n","\n","# 主性成分分析する\n","def make_vec_features(input_df, index, columns, values):\n","    all_pca_df = _all_df = pd.DataFrame()\n","    \n","    # valuesそれぞれでpivotしてpca\n","    for val in values:\n","        _df = pd.pivot_table(input_df, index=index, columns=columns, values=val).fillna(0).add_prefix(val + '=')\n","        _all_df = pd.concat([_all_df, _df], axis=1)\n","        sc_df = StandardScaler().fit_transform(_df.fillna(0))\n","        pca = PCA(n_components=COMPONENT, random_state=1993)\n","        pca_df = pd.DataFrame(pca.fit_transform(sc_df), index=_df.index).rename(columns=lambda x: f\"PlaceID_{val}_PCA_{x:03}\")\n","        all_pca_df = pd.concat([all_pca_df, pca_df], axis=1)\n","    # values全部でpca\n","    sc_all_df = StandardScaler().fit_transform(_all_df.fillna(0))\n","    pca = PCA(n_components=COMPONENT * (len(values)+1), random_state=1993)\n","    pca_df = pd.DataFrame(pca.fit_transform(sc_all_df), index=_all_df.index).rename(columns=lambda x:f\"PlaceID_All_PCA_{x:03}\")\n","\n","    all_pca_df= pd.concat([all_pca_df, pca_df], axis=1)\n","    output_df = pd.merge(input_df[[index]], all_pca_df, left_on=index, right_index=True, how='left')\n","    return output_df.drop('PlaceID', axis=1)\n","\n","# pivot tabel を用いた特徴量\n","class PlaceID2VecBlock(BaseBlock):\n","    def __init__(self, index, columns, values):\n","        self.index = index\n","        self.columns = columns\n","        self.values = values\n","\n","    def transform(self, input_df):\n","        return make_vec_features(input_df, self.index, self.columns, self.values)"],"execution_count":48,"outputs":[]},{"cell_type":"code","metadata":{"id":"6i8YlEihPy6_","executionInfo":{"status":"ok","timestamp":1617632497714,"user_tz":-540,"elapsed":1702,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# PlaceIDをキーにしたグループ内相関係数\n","class PlaceIDcorrBlock(BaseBlock):\n","    def __init__(self, group_key, group_values):\n","        self.group_key = group_key\n","        self.group_values = group_values\n","\n","    def transform(self, input_df):\n","        dfs = []\n","        for gv in self.group_values:\n","            _df = input_df.groupby(self.group_key)[gv].corr().unstack().iloc[:, 1].rename(f\"Corr={gv[0]}-{gv[1]}\")\n","            dfs.append(pd.DataFrame(_df))\n","        dfs = pd.concat(dfs, axis=1)\n","        output_df = pd.merge(input_df[[self.group_key]], dfs, left_on=self.group_key, right_index=True, how='left').drop(self.group_key, axis=1)\n","        return output_df      "],"execution_count":49,"outputs":[]},{"cell_type":"code","metadata":{"id":"PZ_7Px7LkAYA","executionInfo":{"status":"ok","timestamp":1617632497715,"user_tz":-540,"elapsed":1701,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# 各特徴量同士の四則演算?"],"execution_count":50,"outputs":[]},{"cell_type":"code","metadata":{"id":"delO9TMY2J5C","executionInfo":{"status":"ok","timestamp":1617632497715,"user_tz":-540,"elapsed":1699,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["#SumLightとAreaを順位付け\n","class RankBlock(BaseBlock):\n","    def transform(self, input_df):\n","        _df = []\n","        sumli_rank_df = input_df.groupby('PlaceID')['SumLight'].mean().rank(ascending=False)\n","        area_rank_df = input_df.groupby('PlaceID')['Area'].mean().rank()\n","        _df = pd.concat([sumli_rank_df, area_rank_df], axis=1)\n","        _df.columns = ['SumLight_rank', 'Area_rank']\n","        _df['AreaSumLig_rank'] = ( sumli_rank_df + area_rank_df ) / 2.0\n","\n","        output_df = pd.merge(input_df[['PlaceID']], _df, left_on='PlaceID', right_index=True, how='left')\n","        return output_df.drop('PlaceID', axis=1)"],"execution_count":51,"outputs":[]},{"cell_type":"code","metadata":{"id":"IWDBTsRzwbBk","executionInfo":{"status":"ok","timestamp":1617632497715,"user_tz":-540,"elapsed":1695,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# binning\n","class BinningBlock(BaseBlock):\n","    def __init__(self, num_bin, group_key, group_values):\n","        self.num_bin = num_bin\n","        self.group_key = group_key\n","        self.group_values = group_values\n","\n","    def transform(self, input_df):\n","        new_df = []\n","        for gv in self.group_values:\n","            _mean_df = input_df.groupby(self.group_key)[[gv]].mean()\n","            bin = pd.cut(_mean_df[gv], self.num_bin, labels=False).rename(f'Bin_{gv}')\n","            new_df.append(bin)\n","\n","        _df = pd.concat(new_df, axis=1).reset_index()\n","        output_df = pd.merge(input_df[[self.group_key]], _df, on=self.group_key, how='left')\n","        return output_df.drop(self.group_key, axis=1)"],"execution_count":52,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":406},"id":"8J5sfFVvaBYk","executionInfo":{"status":"ok","timestamp":1617632497716,"user_tz":-540,"elapsed":1693,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"5ab851e8-56ce-4ae6-a3f3-740b0ef15ab4"},"source":["train_feat_df.filter(like='target')"],"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>target_Bin_Area</th>\n","      <th>target_Bin_SumLight</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2175.424108</td>\n","      <td>395.269886</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2175.424108</td>\n","      <td>395.269886</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2074.837072</td>\n","      <td>423.195310</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2175.424108</td>\n","      <td>395.269886</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2118.497458</td>\n","      <td>398.990985</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>21878</th>\n","      <td>537.833851</td>\n","      <td>425.052250</td>\n","    </tr>\n","    <tr>\n","      <th>21879</th>\n","      <td>538.608585</td>\n","      <td>445.556215</td>\n","    </tr>\n","    <tr>\n","      <th>21880</th>\n","      <td>526.950997</td>\n","      <td>433.575145</td>\n","    </tr>\n","    <tr>\n","      <th>21881</th>\n","      <td>526.950997</td>\n","      <td>433.575145</td>\n","    </tr>\n","    <tr>\n","      <th>21882</th>\n","      <td>538.608585</td>\n","      <td>445.556215</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>21883 rows × 2 columns</p>\n","</div>"],"text/plain":["       target_Bin_Area  target_Bin_SumLight\n","0          2175.424108           395.269886\n","1          2175.424108           395.269886\n","2          2074.837072           423.195310\n","3          2175.424108           395.269886\n","4          2118.497458           398.990985\n","...                ...                  ...\n","21878       537.833851           425.052250\n","21879       538.608585           445.556215\n","21880       526.950997           433.575145\n","21881       526.950997           433.575145\n","21882       538.608585           445.556215\n","\n","[21883 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":53}]},{"cell_type":"code","metadata":{"id":"QebuC3aX43Bk","executionInfo":{"status":"ok","timestamp":1617632497716,"user_tz":-540,"elapsed":1688,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# sum_mean_df = train.groupby('PlaceID')[['SumLight']].mean()\n","# area_mean_df = train.groupby('PlaceID')[['Area']].mean()\n","# df_mean = pd.merge(sum_mean_df, area_mean_df, on='PlaceID', how='left')\n","# df_mean.columns = ['SumLight_mean', 'Area_mean']\n","\n","# bin = pd.cut(df_mean['SumLight_mean'], 10, labels=False).rename('aaa')\n","\n","# #df_mean = pd.merge(train[['PlaceID']], df, on='PlaceID', how='left')\n","\n","# #df.columns = ['SumLight_mean', 'Area_mean']\n","# bin\n","# # a = pd.DataFrame(bin)\n","# # a.columns=['bin_SumLight_mean']\n","# # a"],"execution_count":54,"outputs":[]},{"cell_type":"code","metadata":{"id":"dPSXCfoi6-K1","executionInfo":{"status":"ok","timestamp":1617632497716,"user_tz":-540,"elapsed":1685,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# bi = BinningBlock(100, 'PlaceID', ['SumLight', 'Area'])\n","# result = bi.transform(train)\n","# result.head(50)"],"execution_count":55,"outputs":[]},{"cell_type":"code","metadata":{"id":"hdUZzcoyq2yp","executionInfo":{"status":"ok","timestamp":1617632497716,"user_tz":-540,"elapsed":1682,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# そのまま使う特徴量\n","class WrapperBlock(BaseBlock):\n","    def __init__(self, function):\n","        self.function = function\n","\n","    def transform(self, input_df):\n","        return self.function(input_df)\n","\n","def origin_features(input_df):\n","    use_columns = [\n","        'Year',\n","        'MeanLight',\n","        'SumLight',\n","        'Area'\n","    ]\n","    return input_df[use_columns]"],"execution_count":56,"outputs":[]},{"cell_type":"code","metadata":{"id":"ol1AYDYaCg38","executionInfo":{"status":"ok","timestamp":1617632497717,"user_tz":-540,"elapsed":1681,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["from contextlib import contextmanager\n","from time import time\n","\n","@contextmanager\n","def timer(logger=None,format_str='{:.3f}[s]',prefix=None,suffix=None):\n","    if prefix: format_str = str(prefix) + format_str\n","    if suffix: format_str = format_str + str(suffix)\n","    start = time()\n","    yield\n","    d = time()-start\n","    out_str = format_str.format(d)\n","    if logger:\n","        logger.info(out_str)\n","    else:\n","        print(out_str)"],"execution_count":57,"outputs":[]},{"cell_type":"code","metadata":{"id":"MvfsIFr6eXee","executionInfo":{"status":"ok","timestamp":1617632497717,"user_tz":-540,"elapsed":1678,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["from tqdm import tqdm\n","\n","def get_function(block, is_train):\n","    s = mapping = {\n","        True: 'fit',\n","        False: 'transform'\n","    }.get(is_train)\n","    return getattr(block, s)\n","\n","def to_feature(input_df, blocks, is_train=False):\n","    output_df = pd.DataFrame()\n","\n","    for block in tqdm(blocks, total=len(blocks)):\n","        func = get_function(block, is_train)\n","\n","        with timer(prefix='create' + str(block) + ' '):\n","            _df = func(input_df)\n","\n","        assert len(_df) == len(input_df), func.__name__\n","        output_df = pd.concat([output_df, _df], axis=1)\n","\n","    return output_df"],"execution_count":58,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KVd6rgWSUxL3","executionInfo":{"status":"ok","timestamp":1617632497718,"user_tz":-540,"elapsed":1675,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"088af470-5898-4286-97ff-0505b0382aed"},"source":["print(len(train['Area'].value_counts()))\n","print(len(train['SumLight'].value_counts()))"],"execution_count":59,"outputs":[{"output_type":"stream","text":["924\n","6981\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KRDgse1x9p1X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617632522056,"user_tz":-540,"elapsed":26008,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"1fef2f07-b5b0-4ab2-9257-ee81d1c1d7e9"},"source":["agg_methods = [\"min\", \"max\", \"median\", \"mean\", \"std\", max_min, third_quartile, first_quartile, quartile_range]\n","\n","num_diffs = range(1, 22)\n","num_shifts = range(1, 22)\n","group_vlaues = [\n","    [\"Year\", \"MeanLight\"],\n","    [\"Year\", \"SumLight\"],\n","    [\"Year\", \"Area\"],\n","]         \n","\n","process_blocks = [\n","    WrapperBlock(origin_features),\n","    Count63Block(),\n","    AggPlaceIDBlock([\"MeanLight\", \"SumLight\", \"Area\"], agg_methods),\n","    AggYearBlock([\"MeanLight\", \"SumLight\", \"Area\"], agg_methods),\n","    LagPlaceIDBlock('PlaceID', [\"MeanLight\", \"SumLight\"], num_diffs),\n","    ShiftPlaceIDBlock('PlaceID', [\"MeanLight\", \"SumLight\"], num_shifts),\n","    PlaceID2VecBlock(\"PlaceID\", \"Year\", [\"Area\", \"MeanLight\", \"SumLight\"]),\n","    PlaceIDcorrBlock(\"PlaceID\", group_vlaues),\n","    RankBlock(),\n","    BinningBlock(80, \"PlaceID\", [\"Area\"]),\n","    BinningBlock(500, \"PlaceID\", [\"SumLight\"]),\n","]\n","\n","train_feat_df = to_feature(train, process_blocks, is_train=True)\n","test_feat_df = to_feature(test, process_blocks, is_train=False)"],"execution_count":60,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/11 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.WrapperBlock object at 0x7f6770613d10> 0.003[s]\n","create<__main__.Count63Block object at 0x7f6770613290> 0.008[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 27%|██▋       | 3/11 [00:06<00:18,  2.31s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.AggPlaceIDBlock object at 0x7f6770613a50> 6.911[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 36%|███▋      | 4/11 [00:07<00:11,  1.70s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.AggYearBlock object at 0x7f6770613690> 0.259[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 45%|████▌     | 5/11 [00:13<00:18,  3.09s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.LagPlaceIDBlock object at 0x7f6770613c10> 6.309[s]\n","create<__main__.ShiftPlaceIDBlock object at 0x7f67706137d0> 0.071[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 64%|██████▎   | 7/11 [00:13<00:08,  2.20s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.PlaceID2VecBlock object at 0x7f6770613750> 0.130[s]\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 11/11 [00:15<00:00,  1.38s/it]\n","  0%|          | 0/11 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.PlaceIDcorrBlock object at 0x7f6770613310> 1.281[s]\n","create<__main__.RankBlock object at 0x7f6770613b10> 0.012[s]\n","create<__main__.BinningBlock object at 0x7f67706132d0> 0.009[s]\n","create<__main__.BinningBlock object at 0x7f6770613ad0> 0.009[s]\n","create<__main__.WrapperBlock object at 0x7f6770613d10> 0.002[s]\n","create<__main__.Count63Block object at 0x7f6770613290> 0.008[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 27%|██▋       | 3/11 [00:04<00:11,  1.40s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.AggPlaceIDBlock object at 0x7f6770613a50> 4.181[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 36%|███▋      | 4/11 [00:04<00:07,  1.06s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.AggYearBlock object at 0x7f6770613690> 0.248[s]\n"],"name":"stdout"},{"output_type":"stream","text":[" 64%|██████▎   | 7/11 [00:08<00:05,  1.32s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.LagPlaceIDBlock object at 0x7f6770613c10> 3.663[s]\n","create<__main__.ShiftPlaceIDBlock object at 0x7f67706137d0> 0.060[s]\n","create<__main__.PlaceID2VecBlock object at 0x7f6770613750> 0.091[s]\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 11/11 [00:09<00:00,  1.19it/s]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.PlaceIDcorrBlock object at 0x7f6770613310> 0.800[s]\n","create<__main__.RankBlock object at 0x7f6770613b10> 0.012[s]\n","create<__main__.BinningBlock object at 0x7f67706132d0> 0.008[s]\n","create<__main__.BinningBlock object at 0x7f6770613ad0> 0.008[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"baFNIUrKXTZo","executionInfo":{"status":"ok","timestamp":1617632522057,"user_tz":-540,"elapsed":26004,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["from sklearn.model_selection import KFold\n","\n","data_temp = train_feat_df[['Bin_Area', 'Bin_SumLight']]\n","data_temp = pd.concat([data_temp, target], axis=1)\n","\n","for c in ['Bin_Area', 'Bin_SumLight']:\n","    target_mean = data_temp.groupby(c)['AverageLandPrice'].mean()\n","    test_feat_df[f'target_{c}'] = test_feat_df[c].map(target_mean)\n","\n","    temp = np.repeat(np.nan, train_feat_df.shape[0])\n","\n","    kf = KFold(n_splits=5, shuffle=True, random_state=71)\n","    for idx_1, idx_2 in kf.split(train_feat_df):\n","        target_mean = data_temp.iloc[idx_1].groupby(c)['AverageLandPrice'].mean()\n","        temp[idx_2] = train_feat_df[c].iloc[idx_2].map(target_mean)\n","\n","    train_feat_df[f'target_{c}'] = temp"],"execution_count":61,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"RqcpmT0lc8HS","executionInfo":{"status":"ok","timestamp":1617633356208,"user_tz":-540,"elapsed":692,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"8e0ee3e9-8dba-4ba5-c3a3-08e4874cf004"},"source":["#train_feat_df[['target_Bin_Area'], ['PlaceID']].head(10)\n","train_feat_df"],"execution_count":83,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Year</th>\n","      <th>MeanLight</th>\n","      <th>SumLight</th>\n","      <th>Area</th>\n","      <th>count63</th>\n","      <th>agg_min_MeanLight_grpby_PlaceID</th>\n","      <th>agg_min_SumLight_grpby_PlaceID</th>\n","      <th>agg_min_Area_grpby_PlaceID</th>\n","      <th>agg_max_MeanLight_grpby_PlaceID</th>\n","      <th>agg_max_SumLight_grpby_PlaceID</th>\n","      <th>agg_max_Area_grpby_PlaceID</th>\n","      <th>agg_median_MeanLight_grpby_PlaceID</th>\n","      <th>agg_median_SumLight_grpby_PlaceID</th>\n","      <th>agg_median_Area_grpby_PlaceID</th>\n","      <th>agg_mean_MeanLight_grpby_PlaceID</th>\n","      <th>agg_mean_SumLight_grpby_PlaceID</th>\n","      <th>agg_mean_Area_grpby_PlaceID</th>\n","      <th>agg_std_MeanLight_grpby_PlaceID</th>\n","      <th>agg_std_SumLight_grpby_PlaceID</th>\n","      <th>agg_std_Area_grpby_PlaceID</th>\n","      <th>agg_max_min_MeanLight_grpby_PlaceID</th>\n","      <th>agg_max_min_SumLight_grpby_PlaceID</th>\n","      <th>agg_max_min_Area_grpby_PlaceID</th>\n","      <th>agg_third_quartile_MeanLight_grpby_PlaceID</th>\n","      <th>agg_third_quartile_SumLight_grpby_PlaceID</th>\n","      <th>agg_third_quartile_Area_grpby_PlaceID</th>\n","      <th>agg_first_quartile_MeanLight_grpby_PlaceID</th>\n","      <th>agg_first_quartile_SumLight_grpby_PlaceID</th>\n","      <th>agg_first_quartile_Area_grpby_PlaceID</th>\n","      <th>agg_quartile_range_MeanLight_grpby_PlaceID</th>\n","      <th>agg_quartile_range_SumLight_grpby_PlaceID</th>\n","      <th>agg_quartile_range_Area_grpby_PlaceID</th>\n","      <th>agg_min_MeanLight_grpby_Year</th>\n","      <th>agg_min_SumLight_grpby_Year</th>\n","      <th>agg_min_Area_grpby_Year</th>\n","      <th>agg_max_MeanLight_grpby_Year</th>\n","      <th>agg_max_SumLight_grpby_Year</th>\n","      <th>agg_max_Area_grpby_Year</th>\n","      <th>agg_median_MeanLight_grpby_Year</th>\n","      <th>agg_median_SumLight_grpby_Year</th>\n","      <th>...</th>\n","      <th>PlaceID_All_PCA_034</th>\n","      <th>PlaceID_All_PCA_035</th>\n","      <th>PlaceID_All_PCA_036</th>\n","      <th>PlaceID_All_PCA_037</th>\n","      <th>PlaceID_All_PCA_038</th>\n","      <th>PlaceID_All_PCA_039</th>\n","      <th>PlaceID_All_PCA_040</th>\n","      <th>PlaceID_All_PCA_041</th>\n","      <th>PlaceID_All_PCA_042</th>\n","      <th>PlaceID_All_PCA_043</th>\n","      <th>PlaceID_All_PCA_044</th>\n","      <th>PlaceID_All_PCA_045</th>\n","      <th>PlaceID_All_PCA_046</th>\n","      <th>PlaceID_All_PCA_047</th>\n","      <th>PlaceID_All_PCA_048</th>\n","      <th>PlaceID_All_PCA_049</th>\n","      <th>PlaceID_All_PCA_050</th>\n","      <th>PlaceID_All_PCA_051</th>\n","      <th>PlaceID_All_PCA_052</th>\n","      <th>PlaceID_All_PCA_053</th>\n","      <th>PlaceID_All_PCA_054</th>\n","      <th>PlaceID_All_PCA_055</th>\n","      <th>PlaceID_All_PCA_056</th>\n","      <th>PlaceID_All_PCA_057</th>\n","      <th>PlaceID_All_PCA_058</th>\n","      <th>PlaceID_All_PCA_059</th>\n","      <th>PlaceID_All_PCA_060</th>\n","      <th>PlaceID_All_PCA_061</th>\n","      <th>PlaceID_All_PCA_062</th>\n","      <th>PlaceID_All_PCA_063</th>\n","      <th>Corr=Year-MeanLight</th>\n","      <th>Corr=Year-SumLight</th>\n","      <th>Corr=Year-Area</th>\n","      <th>SumLight_rank</th>\n","      <th>Area_rank</th>\n","      <th>AreaSumLig_rank</th>\n","      <th>Bin_Area</th>\n","      <th>Bin_SumLight</th>\n","      <th>target_Bin_Area</th>\n","      <th>target_Bin_SumLight</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1993</td>\n","      <td>57.571430</td>\n","      <td>403.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>57.571430</td>\n","      <td>403.0</td>\n","      <td>7.0</td>\n","      <td>62.857143</td>\n","      <td>440.0</td>\n","      <td>7.0</td>\n","      <td>61.000000</td>\n","      <td>427.0</td>\n","      <td>7.0</td>\n","      <td>60.931973</td>\n","      <td>426.523810</td>\n","      <td>7.0</td>\n","      <td>1.356480</td>\n","      <td>9.495362</td>\n","      <td>0.0</td>\n","      <td>5.285713</td>\n","      <td>37.0</td>\n","      <td>0.0</td>\n","      <td>61.857143</td>\n","      <td>433.0</td>\n","      <td>7.0</td>\n","      <td>60.857143</td>\n","      <td>426.00</td>\n","      <td>7.0</td>\n","      <td>1.000000</td>\n","      <td>7.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>63.0</td>\n","      <td>41096.0</td>\n","      <td>2173.000037</td>\n","      <td>14.778846</td>\n","      <td>1610.0</td>\n","      <td>...</td>\n","      <td>0.066797</td>\n","      <td>-0.059740</td>\n","      <td>-0.012201</td>\n","      <td>0.000541</td>\n","      <td>0.048075</td>\n","      <td>-0.008962</td>\n","      <td>-0.001564</td>\n","      <td>0.013284</td>\n","      <td>-0.052793</td>\n","      <td>-0.038536</td>\n","      <td>0.015634</td>\n","      <td>-0.020228</td>\n","      <td>-0.024513</td>\n","      <td>-0.045629</td>\n","      <td>-0.003805</td>\n","      <td>0.024297</td>\n","      <td>-0.017629</td>\n","      <td>-0.014598</td>\n","      <td>0.005134</td>\n","      <td>-0.012090</td>\n","      <td>0.013854</td>\n","      <td>0.028133</td>\n","      <td>0.001797</td>\n","      <td>-0.001751</td>\n","      <td>-0.000163</td>\n","      <td>0.001125</td>\n","      <td>-0.003618</td>\n","      <td>0.001028</td>\n","      <td>-0.001914</td>\n","      <td>-0.000885</td>\n","      <td>0.011881</td>\n","      <td>0.011881</td>\n","      <td>NaN</td>\n","      <td>915.0</td>\n","      <td>16.5</td>\n","      <td>465.75</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>2175.424108</td>\n","      <td>395.269886</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1994</td>\n","      <td>62.714287</td>\n","      <td>439.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>57.571430</td>\n","      <td>403.0</td>\n","      <td>7.0</td>\n","      <td>62.857143</td>\n","      <td>440.0</td>\n","      <td>7.0</td>\n","      <td>61.000000</td>\n","      <td>427.0</td>\n","      <td>7.0</td>\n","      <td>60.931973</td>\n","      <td>426.523810</td>\n","      <td>7.0</td>\n","      <td>1.356480</td>\n","      <td>9.495362</td>\n","      <td>0.0</td>\n","      <td>5.285713</td>\n","      <td>37.0</td>\n","      <td>0.0</td>\n","      <td>61.857143</td>\n","      <td>433.0</td>\n","      <td>7.0</td>\n","      <td>60.857143</td>\n","      <td>426.00</td>\n","      <td>7.0</td>\n","      <td>1.000000</td>\n","      <td>7.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>63.0</td>\n","      <td>35487.0</td>\n","      <td>2173.000037</td>\n","      <td>16.970414</td>\n","      <td>1608.0</td>\n","      <td>...</td>\n","      <td>0.066797</td>\n","      <td>-0.059740</td>\n","      <td>-0.012201</td>\n","      <td>0.000541</td>\n","      <td>0.048075</td>\n","      <td>-0.008962</td>\n","      <td>-0.001564</td>\n","      <td>0.013284</td>\n","      <td>-0.052793</td>\n","      <td>-0.038536</td>\n","      <td>0.015634</td>\n","      <td>-0.020228</td>\n","      <td>-0.024513</td>\n","      <td>-0.045629</td>\n","      <td>-0.003805</td>\n","      <td>0.024297</td>\n","      <td>-0.017629</td>\n","      <td>-0.014598</td>\n","      <td>0.005134</td>\n","      <td>-0.012090</td>\n","      <td>0.013854</td>\n","      <td>0.028133</td>\n","      <td>0.001797</td>\n","      <td>-0.001751</td>\n","      <td>-0.000163</td>\n","      <td>0.001125</td>\n","      <td>-0.003618</td>\n","      <td>0.001028</td>\n","      <td>-0.001914</td>\n","      <td>-0.000885</td>\n","      <td>0.011881</td>\n","      <td>0.011881</td>\n","      <td>NaN</td>\n","      <td>915.0</td>\n","      <td>16.5</td>\n","      <td>465.75</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>2175.424108</td>\n","      <td>395.269886</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1995</td>\n","      <td>61.857143</td>\n","      <td>433.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>57.571430</td>\n","      <td>403.0</td>\n","      <td>7.0</td>\n","      <td>62.857143</td>\n","      <td>440.0</td>\n","      <td>7.0</td>\n","      <td>61.000000</td>\n","      <td>427.0</td>\n","      <td>7.0</td>\n","      <td>60.931973</td>\n","      <td>426.523810</td>\n","      <td>7.0</td>\n","      <td>1.356480</td>\n","      <td>9.495362</td>\n","      <td>0.0</td>\n","      <td>5.285713</td>\n","      <td>37.0</td>\n","      <td>0.0</td>\n","      <td>61.857143</td>\n","      <td>433.0</td>\n","      <td>7.0</td>\n","      <td>60.857143</td>\n","      <td>426.00</td>\n","      <td>7.0</td>\n","      <td>1.000000</td>\n","      <td>7.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>63.0</td>\n","      <td>39738.0</td>\n","      <td>2173.000037</td>\n","      <td>17.406781</td>\n","      <td>1820.0</td>\n","      <td>...</td>\n","      <td>0.066797</td>\n","      <td>-0.059740</td>\n","      <td>-0.012201</td>\n","      <td>0.000541</td>\n","      <td>0.048075</td>\n","      <td>-0.008962</td>\n","      <td>-0.001564</td>\n","      <td>0.013284</td>\n","      <td>-0.052793</td>\n","      <td>-0.038536</td>\n","      <td>0.015634</td>\n","      <td>-0.020228</td>\n","      <td>-0.024513</td>\n","      <td>-0.045629</td>\n","      <td>-0.003805</td>\n","      <td>0.024297</td>\n","      <td>-0.017629</td>\n","      <td>-0.014598</td>\n","      <td>0.005134</td>\n","      <td>-0.012090</td>\n","      <td>0.013854</td>\n","      <td>0.028133</td>\n","      <td>0.001797</td>\n","      <td>-0.001751</td>\n","      <td>-0.000163</td>\n","      <td>0.001125</td>\n","      <td>-0.003618</td>\n","      <td>0.001028</td>\n","      <td>-0.001914</td>\n","      <td>-0.000885</td>\n","      <td>0.011881</td>\n","      <td>0.011881</td>\n","      <td>NaN</td>\n","      <td>915.0</td>\n","      <td>16.5</td>\n","      <td>465.75</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>2074.837072</td>\n","      <td>423.195310</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1996</td>\n","      <td>61.714287</td>\n","      <td>432.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>57.571430</td>\n","      <td>403.0</td>\n","      <td>7.0</td>\n","      <td>62.857143</td>\n","      <td>440.0</td>\n","      <td>7.0</td>\n","      <td>61.000000</td>\n","      <td>427.0</td>\n","      <td>7.0</td>\n","      <td>60.931973</td>\n","      <td>426.523810</td>\n","      <td>7.0</td>\n","      <td>1.356480</td>\n","      <td>9.495362</td>\n","      <td>0.0</td>\n","      <td>5.285713</td>\n","      <td>37.0</td>\n","      <td>0.0</td>\n","      <td>61.857143</td>\n","      <td>433.0</td>\n","      <td>7.0</td>\n","      <td>60.857143</td>\n","      <td>426.00</td>\n","      <td>7.0</td>\n","      <td>1.000000</td>\n","      <td>7.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>63.0</td>\n","      <td>39698.0</td>\n","      <td>2173.000037</td>\n","      <td>17.730993</td>\n","      <td>1845.0</td>\n","      <td>...</td>\n","      <td>0.066797</td>\n","      <td>-0.059740</td>\n","      <td>-0.012201</td>\n","      <td>0.000541</td>\n","      <td>0.048075</td>\n","      <td>-0.008962</td>\n","      <td>-0.001564</td>\n","      <td>0.013284</td>\n","      <td>-0.052793</td>\n","      <td>-0.038536</td>\n","      <td>0.015634</td>\n","      <td>-0.020228</td>\n","      <td>-0.024513</td>\n","      <td>-0.045629</td>\n","      <td>-0.003805</td>\n","      <td>0.024297</td>\n","      <td>-0.017629</td>\n","      <td>-0.014598</td>\n","      <td>0.005134</td>\n","      <td>-0.012090</td>\n","      <td>0.013854</td>\n","      <td>0.028133</td>\n","      <td>0.001797</td>\n","      <td>-0.001751</td>\n","      <td>-0.000163</td>\n","      <td>0.001125</td>\n","      <td>-0.003618</td>\n","      <td>0.001028</td>\n","      <td>-0.001914</td>\n","      <td>-0.000885</td>\n","      <td>0.011881</td>\n","      <td>0.011881</td>\n","      <td>NaN</td>\n","      <td>915.0</td>\n","      <td>16.5</td>\n","      <td>465.75</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>2175.424108</td>\n","      <td>395.269886</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1997</td>\n","      <td>62.857143</td>\n","      <td>440.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>57.571430</td>\n","      <td>403.0</td>\n","      <td>7.0</td>\n","      <td>62.857143</td>\n","      <td>440.0</td>\n","      <td>7.0</td>\n","      <td>61.000000</td>\n","      <td>427.0</td>\n","      <td>7.0</td>\n","      <td>60.931973</td>\n","      <td>426.523810</td>\n","      <td>7.0</td>\n","      <td>1.356480</td>\n","      <td>9.495362</td>\n","      <td>0.0</td>\n","      <td>5.285713</td>\n","      <td>37.0</td>\n","      <td>0.0</td>\n","      <td>61.857143</td>\n","      <td>433.0</td>\n","      <td>7.0</td>\n","      <td>60.857143</td>\n","      <td>426.00</td>\n","      <td>7.0</td>\n","      <td>1.000000</td>\n","      <td>7.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>63.0</td>\n","      <td>32830.0</td>\n","      <td>2173.000037</td>\n","      <td>14.655933</td>\n","      <td>1409.0</td>\n","      <td>...</td>\n","      <td>0.066797</td>\n","      <td>-0.059740</td>\n","      <td>-0.012201</td>\n","      <td>0.000541</td>\n","      <td>0.048075</td>\n","      <td>-0.008962</td>\n","      <td>-0.001564</td>\n","      <td>0.013284</td>\n","      <td>-0.052793</td>\n","      <td>-0.038536</td>\n","      <td>0.015634</td>\n","      <td>-0.020228</td>\n","      <td>-0.024513</td>\n","      <td>-0.045629</td>\n","      <td>-0.003805</td>\n","      <td>0.024297</td>\n","      <td>-0.017629</td>\n","      <td>-0.014598</td>\n","      <td>0.005134</td>\n","      <td>-0.012090</td>\n","      <td>0.013854</td>\n","      <td>0.028133</td>\n","      <td>0.001797</td>\n","      <td>-0.001751</td>\n","      <td>-0.000163</td>\n","      <td>0.001125</td>\n","      <td>-0.003618</td>\n","      <td>0.001028</td>\n","      <td>-0.001914</td>\n","      <td>-0.000885</td>\n","      <td>0.011881</td>\n","      <td>0.011881</td>\n","      <td>NaN</td>\n","      <td>915.0</td>\n","      <td>16.5</td>\n","      <td>465.75</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>2118.497458</td>\n","      <td>398.990985</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>21878</th>\n","      <td>2009</td>\n","      <td>10.978724</td>\n","      <td>1032.0</td>\n","      <td>89.0</td>\n","      <td>0.0</td>\n","      <td>8.966292</td>\n","      <td>798.0</td>\n","      <td>89.0</td>\n","      <td>16.734043</td>\n","      <td>1573.0</td>\n","      <td>89.0</td>\n","      <td>11.820225</td>\n","      <td>1052.0</td>\n","      <td>89.0</td>\n","      <td>11.878170</td>\n","      <td>1066.318182</td>\n","      <td>89.0</td>\n","      <td>1.747232</td>\n","      <td>167.831942</td>\n","      <td>0.0</td>\n","      <td>7.767751</td>\n","      <td>775.0</td>\n","      <td>0.0</td>\n","      <td>12.893258</td>\n","      <td>1155.5</td>\n","      <td>89.0</td>\n","      <td>10.859850</td>\n","      <td>971.75</td>\n","      <td>89.0</td>\n","      <td>2.033408</td>\n","      <td>183.75</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>63.0</td>\n","      <td>36785.0</td>\n","      <td>2173.000037</td>\n","      <td>15.851393</td>\n","      <td>1571.0</td>\n","      <td>...</td>\n","      <td>-0.002725</td>\n","      <td>-0.012181</td>\n","      <td>-0.001527</td>\n","      <td>-0.016139</td>\n","      <td>-0.018211</td>\n","      <td>-0.007880</td>\n","      <td>0.006038</td>\n","      <td>0.024930</td>\n","      <td>-0.007187</td>\n","      <td>-0.003776</td>\n","      <td>0.007296</td>\n","      <td>-0.007032</td>\n","      <td>-0.000561</td>\n","      <td>-0.013268</td>\n","      <td>0.005013</td>\n","      <td>0.012700</td>\n","      <td>0.005031</td>\n","      <td>0.003175</td>\n","      <td>0.005454</td>\n","      <td>0.003095</td>\n","      <td>-0.006323</td>\n","      <td>0.006295</td>\n","      <td>0.001104</td>\n","      <td>-0.004218</td>\n","      <td>-0.003313</td>\n","      <td>-0.001127</td>\n","      <td>-0.003805</td>\n","      <td>0.000818</td>\n","      <td>0.000722</td>\n","      <td>-0.000909</td>\n","      <td>0.308925</td>\n","      <td>0.352632</td>\n","      <td>0.0</td>\n","      <td>681.0</td>\n","      <td>422.0</td>\n","      <td>551.50</td>\n","      <td>3</td>\n","      <td>14</td>\n","      <td>537.833851</td>\n","      <td>425.052250</td>\n","    </tr>\n","    <tr>\n","      <th>21879</th>\n","      <td>2010</td>\n","      <td>16.734043</td>\n","      <td>1573.0</td>\n","      <td>89.0</td>\n","      <td>0.0</td>\n","      <td>8.966292</td>\n","      <td>798.0</td>\n","      <td>89.0</td>\n","      <td>16.734043</td>\n","      <td>1573.0</td>\n","      <td>89.0</td>\n","      <td>11.820225</td>\n","      <td>1052.0</td>\n","      <td>89.0</td>\n","      <td>11.878170</td>\n","      <td>1066.318182</td>\n","      <td>89.0</td>\n","      <td>1.747232</td>\n","      <td>167.831942</td>\n","      <td>0.0</td>\n","      <td>7.767751</td>\n","      <td>775.0</td>\n","      <td>0.0</td>\n","      <td>12.893258</td>\n","      <td>1155.5</td>\n","      <td>89.0</td>\n","      <td>10.859850</td>\n","      <td>971.75</td>\n","      <td>89.0</td>\n","      <td>2.033408</td>\n","      <td>183.75</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>63.0</td>\n","      <td>41192.0</td>\n","      <td>2173.000037</td>\n","      <td>20.493765</td>\n","      <td>2077.0</td>\n","      <td>...</td>\n","      <td>-0.002725</td>\n","      <td>-0.012181</td>\n","      <td>-0.001527</td>\n","      <td>-0.016139</td>\n","      <td>-0.018211</td>\n","      <td>-0.007880</td>\n","      <td>0.006038</td>\n","      <td>0.024930</td>\n","      <td>-0.007187</td>\n","      <td>-0.003776</td>\n","      <td>0.007296</td>\n","      <td>-0.007032</td>\n","      <td>-0.000561</td>\n","      <td>-0.013268</td>\n","      <td>0.005013</td>\n","      <td>0.012700</td>\n","      <td>0.005031</td>\n","      <td>0.003175</td>\n","      <td>0.005454</td>\n","      <td>0.003095</td>\n","      <td>-0.006323</td>\n","      <td>0.006295</td>\n","      <td>0.001104</td>\n","      <td>-0.004218</td>\n","      <td>-0.003313</td>\n","      <td>-0.001127</td>\n","      <td>-0.003805</td>\n","      <td>0.000818</td>\n","      <td>0.000722</td>\n","      <td>-0.000909</td>\n","      <td>0.308925</td>\n","      <td>0.352632</td>\n","      <td>0.0</td>\n","      <td>681.0</td>\n","      <td>422.0</td>\n","      <td>551.50</td>\n","      <td>3</td>\n","      <td>14</td>\n","      <td>538.608585</td>\n","      <td>445.556215</td>\n","    </tr>\n","    <tr>\n","      <th>21880</th>\n","      <td>2011</td>\n","      <td>12.595745</td>\n","      <td>1184.0</td>\n","      <td>89.0</td>\n","      <td>0.0</td>\n","      <td>8.966292</td>\n","      <td>798.0</td>\n","      <td>89.0</td>\n","      <td>16.734043</td>\n","      <td>1573.0</td>\n","      <td>89.0</td>\n","      <td>11.820225</td>\n","      <td>1052.0</td>\n","      <td>89.0</td>\n","      <td>11.878170</td>\n","      <td>1066.318182</td>\n","      <td>89.0</td>\n","      <td>1.747232</td>\n","      <td>167.831942</td>\n","      <td>0.0</td>\n","      <td>7.767751</td>\n","      <td>775.0</td>\n","      <td>0.0</td>\n","      <td>12.893258</td>\n","      <td>1155.5</td>\n","      <td>89.0</td>\n","      <td>10.859850</td>\n","      <td>971.75</td>\n","      <td>89.0</td>\n","      <td>2.033408</td>\n","      <td>183.75</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>63.0</td>\n","      <td>38121.0</td>\n","      <td>2173.000037</td>\n","      <td>16.798096</td>\n","      <td>1735.0</td>\n","      <td>...</td>\n","      <td>-0.002725</td>\n","      <td>-0.012181</td>\n","      <td>-0.001527</td>\n","      <td>-0.016139</td>\n","      <td>-0.018211</td>\n","      <td>-0.007880</td>\n","      <td>0.006038</td>\n","      <td>0.024930</td>\n","      <td>-0.007187</td>\n","      <td>-0.003776</td>\n","      <td>0.007296</td>\n","      <td>-0.007032</td>\n","      <td>-0.000561</td>\n","      <td>-0.013268</td>\n","      <td>0.005013</td>\n","      <td>0.012700</td>\n","      <td>0.005031</td>\n","      <td>0.003175</td>\n","      <td>0.005454</td>\n","      <td>0.003095</td>\n","      <td>-0.006323</td>\n","      <td>0.006295</td>\n","      <td>0.001104</td>\n","      <td>-0.004218</td>\n","      <td>-0.003313</td>\n","      <td>-0.001127</td>\n","      <td>-0.003805</td>\n","      <td>0.000818</td>\n","      <td>0.000722</td>\n","      <td>-0.000909</td>\n","      <td>0.308925</td>\n","      <td>0.352632</td>\n","      <td>0.0</td>\n","      <td>681.0</td>\n","      <td>422.0</td>\n","      <td>551.50</td>\n","      <td>3</td>\n","      <td>14</td>\n","      <td>526.950997</td>\n","      <td>433.575145</td>\n","    </tr>\n","    <tr>\n","      <th>21881</th>\n","      <td>2012</td>\n","      <td>13.775281</td>\n","      <td>1226.0</td>\n","      <td>89.0</td>\n","      <td>0.0</td>\n","      <td>8.966292</td>\n","      <td>798.0</td>\n","      <td>89.0</td>\n","      <td>16.734043</td>\n","      <td>1573.0</td>\n","      <td>89.0</td>\n","      <td>11.820225</td>\n","      <td>1052.0</td>\n","      <td>89.0</td>\n","      <td>11.878170</td>\n","      <td>1066.318182</td>\n","      <td>89.0</td>\n","      <td>1.747232</td>\n","      <td>167.831942</td>\n","      <td>0.0</td>\n","      <td>7.767751</td>\n","      <td>775.0</td>\n","      <td>0.0</td>\n","      <td>12.893258</td>\n","      <td>1155.5</td>\n","      <td>89.0</td>\n","      <td>10.859850</td>\n","      <td>971.75</td>\n","      <td>89.0</td>\n","      <td>2.033408</td>\n","      <td>183.75</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>63.0</td>\n","      <td>38457.0</td>\n","      <td>2173.000037</td>\n","      <td>17.666666</td>\n","      <td>1854.0</td>\n","      <td>...</td>\n","      <td>-0.002725</td>\n","      <td>-0.012181</td>\n","      <td>-0.001527</td>\n","      <td>-0.016139</td>\n","      <td>-0.018211</td>\n","      <td>-0.007880</td>\n","      <td>0.006038</td>\n","      <td>0.024930</td>\n","      <td>-0.007187</td>\n","      <td>-0.003776</td>\n","      <td>0.007296</td>\n","      <td>-0.007032</td>\n","      <td>-0.000561</td>\n","      <td>-0.013268</td>\n","      <td>0.005013</td>\n","      <td>0.012700</td>\n","      <td>0.005031</td>\n","      <td>0.003175</td>\n","      <td>0.005454</td>\n","      <td>0.003095</td>\n","      <td>-0.006323</td>\n","      <td>0.006295</td>\n","      <td>0.001104</td>\n","      <td>-0.004218</td>\n","      <td>-0.003313</td>\n","      <td>-0.001127</td>\n","      <td>-0.003805</td>\n","      <td>0.000818</td>\n","      <td>0.000722</td>\n","      <td>-0.000909</td>\n","      <td>0.308925</td>\n","      <td>0.352632</td>\n","      <td>0.0</td>\n","      <td>681.0</td>\n","      <td>422.0</td>\n","      <td>551.50</td>\n","      <td>3</td>\n","      <td>14</td>\n","      <td>526.950997</td>\n","      <td>433.575145</td>\n","    </tr>\n","    <tr>\n","      <th>21882</th>\n","      <td>2013</td>\n","      <td>13.011236</td>\n","      <td>1158.0</td>\n","      <td>89.0</td>\n","      <td>0.0</td>\n","      <td>8.966292</td>\n","      <td>798.0</td>\n","      <td>89.0</td>\n","      <td>16.734043</td>\n","      <td>1573.0</td>\n","      <td>89.0</td>\n","      <td>11.820225</td>\n","      <td>1052.0</td>\n","      <td>89.0</td>\n","      <td>11.878170</td>\n","      <td>1066.318182</td>\n","      <td>89.0</td>\n","      <td>1.747232</td>\n","      <td>167.831942</td>\n","      <td>0.0</td>\n","      <td>7.767751</td>\n","      <td>775.0</td>\n","      <td>0.0</td>\n","      <td>12.893258</td>\n","      <td>1155.5</td>\n","      <td>89.0</td>\n","      <td>10.859850</td>\n","      <td>971.75</td>\n","      <td>89.0</td>\n","      <td>2.033408</td>\n","      <td>183.75</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>63.0</td>\n","      <td>38218.0</td>\n","      <td>2173.000037</td>\n","      <td>17.450214</td>\n","      <td>1829.0</td>\n","      <td>...</td>\n","      <td>-0.002725</td>\n","      <td>-0.012181</td>\n","      <td>-0.001527</td>\n","      <td>-0.016139</td>\n","      <td>-0.018211</td>\n","      <td>-0.007880</td>\n","      <td>0.006038</td>\n","      <td>0.024930</td>\n","      <td>-0.007187</td>\n","      <td>-0.003776</td>\n","      <td>0.007296</td>\n","      <td>-0.007032</td>\n","      <td>-0.000561</td>\n","      <td>-0.013268</td>\n","      <td>0.005013</td>\n","      <td>0.012700</td>\n","      <td>0.005031</td>\n","      <td>0.003175</td>\n","      <td>0.005454</td>\n","      <td>0.003095</td>\n","      <td>-0.006323</td>\n","      <td>0.006295</td>\n","      <td>0.001104</td>\n","      <td>-0.004218</td>\n","      <td>-0.003313</td>\n","      <td>-0.001127</td>\n","      <td>-0.003805</td>\n","      <td>0.000818</td>\n","      <td>0.000722</td>\n","      <td>-0.000909</td>\n","      <td>0.308925</td>\n","      <td>0.352632</td>\n","      <td>0.0</td>\n","      <td>681.0</td>\n","      <td>422.0</td>\n","      <td>551.50</td>\n","      <td>3</td>\n","      <td>14</td>\n","      <td>538.608585</td>\n","      <td>445.556215</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>21883 rows × 265 columns</p>\n","</div>"],"text/plain":["       Year  MeanLight  ...  target_Bin_Area  target_Bin_SumLight\n","0      1993  57.571430  ...      2175.424108           395.269886\n","1      1994  62.714287  ...      2175.424108           395.269886\n","2      1995  61.857143  ...      2074.837072           423.195310\n","3      1996  61.714287  ...      2175.424108           395.269886\n","4      1997  62.857143  ...      2118.497458           398.990985\n","...     ...        ...  ...              ...                  ...\n","21878  2009  10.978724  ...       537.833851           425.052250\n","21879  2010  16.734043  ...       538.608585           445.556215\n","21880  2011  12.595745  ...       526.950997           433.575145\n","21881  2012  13.775281  ...       526.950997           433.575145\n","21882  2013  13.011236  ...       538.608585           445.556215\n","\n","[21883 rows x 265 columns]"]},"metadata":{"tags":[]},"execution_count":83}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AzgwHGM6tGi3","executionInfo":{"status":"ok","timestamp":1617632522057,"user_tz":-540,"elapsed":26001,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"34e809ea-0aa6-4422-c695-321b8c7ad0b6"},"source":["train_feat_df.columns"],"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Year', 'MeanLight', 'SumLight', 'Area', 'count63',\n","       'agg_min_MeanLight_grpby_PlaceID', 'agg_min_SumLight_grpby_PlaceID',\n","       'agg_min_Area_grpby_PlaceID', 'agg_max_MeanLight_grpby_PlaceID',\n","       'agg_max_SumLight_grpby_PlaceID',\n","       ...\n","       'Corr=Year-MeanLight', 'Corr=Year-SumLight', 'Corr=Year-Area',\n","       'SumLight_rank', 'Area_rank', 'AreaSumLig_rank', 'Bin_Area',\n","       'Bin_SumLight', 'target_Bin_Area', 'target_Bin_SumLight'],\n","      dtype='object', length=265)"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VzEF8L4bQYoo","executionInfo":{"status":"ok","timestamp":1617632522057,"user_tz":-540,"elapsed":25997,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"f53d8463-0b54-4452-b6ba-3b816ab7d4aa"},"source":["train_feat_df.shape"],"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(21883, 265)"]},"metadata":{"tags":[]},"execution_count":63}]},{"cell_type":"code","metadata":{"id":"eEIzhVw8c9DM","executionInfo":{"status":"ok","timestamp":1617632572208,"user_tz":-540,"elapsed":685,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# GroupKFold\n","from sklearn.model_selection import KFold\n","\n","fold = KFold(n_splits=5, shuffle=True, random_state=71)\n","cv = list(fold.split(train_feat_df, target))"],"execution_count":66,"outputs":[]},{"cell_type":"code","metadata":{"id":"67OzIsH_de4D","executionInfo":{"status":"ok","timestamp":1617632572463,"user_tz":-540,"elapsed":935,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# RMSLE → RMSE\n","y = np.log1p(target)"],"execution_count":67,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-nL7KM4VlViv"},"source":["# Model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M00UW7TVfnmG","executionInfo":{"status":"ok","timestamp":1617632583380,"user_tz":-540,"elapsed":11849,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"1d9a9c67-88c8-4150-8c04-47d0422c745a"},"source":["!pip install catboost"],"execution_count":68,"outputs":[{"output_type":"stream","text":["Collecting catboost\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1e/21/d1718eb4c93d6bacdd540b3792187f32ccb1ad9c51b9c4f10875d63ec176/catboost-0.25-cp37-none-manylinux1_x86_64.whl (67.3MB)\n","\u001b[K     |████████████████████████████████| 67.3MB 44kB/s \n","\u001b[?25hRequirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from catboost) (1.15.0)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.19.5)\n","Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.1.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from catboost) (1.4.1)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from catboost) (0.10.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from catboost) (3.2.2)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from catboost) (4.4.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2.8.1)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (2.4.7)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (0.10.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (1.3.1)\n","Requirement already satisfied: retrying>=1.3.3 in /usr/local/lib/python3.7/dist-packages (from plotly->catboost) (1.3.3)\n","Installing collected packages: catboost\n","Successfully installed catboost-0.25\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9y83a_GUfRoP","executionInfo":{"status":"ok","timestamp":1617632584198,"user_tz":-540,"elapsed":12663,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["import lightgbm as lgb\n","import xgboost as xgb\n","from catboost import CatBoost\n","from catboost import Pool\n","from sklearn.metrics import mean_squared_error\n","from sklearn.linear_model import Ridge"],"execution_count":69,"outputs":[]},{"cell_type":"code","metadata":{"id":"AdAzjYUufS3X","executionInfo":{"status":"ok","timestamp":1617632584198,"user_tz":-540,"elapsed":12659,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["from abc import abstractmethod\n","class Base_Model(object):\n","    @abstractmethod\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        raise NotImplementedError\n","\n","    @abstractmethod\n","    def predict(self, model, features):\n","        raise NotImplementedError\n","\n","    def cv(self, y_train, train_features, test_features, fold_ids):\n","        test_preds = np.zeros(len(test_features))\n","        oof_preds = np.zeros(len(train_features))\n","\n","        for i_fold, (trn_idx, val_idx) in enumerate(fold_ids):\n","            x_trn = train_features.iloc[trn_idx]\n","            y_trn = y_train[trn_idx]\n","            x_val = train_features.iloc[val_idx]\n","            y_val = y_train[val_idx]\n","\n","            with timer(prefix=f'fit fold={i_fold}'):\n","                model = self.fit(x_trn, y_trn, x_val, y_val)\n","\n","            oof_preds[val_idx] = self.predict(model, x_val)\n","            oof_score = np.sqrt(mean_squared_error(y_val, oof_preds[val_idx]))\n","            print('fold{}:RMSLE{}'.format(i_fold, oof_score))\n","            test_preds += self.predict(model, test_features) / len(fold_ids)\n","\n","        oof_score = np.sqrt(mean_squared_error(y_train, oof_preds))\n","        print(f'oof score: {oof_score}')\n","\n","        evals_results = {\"evals_result\": {\n","            \"oof_score\": oof_score,\n","            \"n_data\": len(train_features),\n","            \"n_features\": len(train_features.columns),\n","        }}\n","\n","        return oof_preds, test_preds, evals_results"],"execution_count":70,"outputs":[]},{"cell_type":"code","metadata":{"id":"3jgxxQMFfmg7","executionInfo":{"status":"ok","timestamp":1617632584199,"user_tz":-540,"elapsed":12657,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["cat_col = []\n","class Lgbm(Base_Model):\n","    def __init__(self, model_params):\n","        self.model_params = model_params\n","        self.models = []\n","        self.feature_cols = None\n","\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        lgb_train = lgb.Dataset(x_train, y_train)\n","        lgb_valid = lgb.Dataset(x_valid, y_valid)\n","\n","        model = lgb.train(self.model_params,\n","            train_set=lgb_train,\n","            valid_sets=[lgb_valid],\n","            valid_names=['valid'],\n","            categorical_feature=cat_col,\n","            early_stopping_rounds=100,\n","            num_boost_round=10000,\n","            verbose_eval=False)\n","        self.models.append(model)\n","        return model\n","\n","    def predict(self, model, features):\n","        self.feature_cols = features.columns\n","        return model.predict(features)\n","\n","    def visualize_importance(self):\n","        feature_importance_df = pd.DataFrame()\n","\n","        for i,model in enumerate(self.models):\n","            _df = pd.DataFrame()\n","            _df['feature_importance'] = model.feature_importance(importance_type='gain')\n","            _df['column'] = self.feature_cols\n","            _df['fold'] = i+1\n","            feature_importance_df = pd.concat([feature_importance_df, _df],axis=0, ignore_index=True)\n","\n","        order = feature_importance_df.groupby('column').sum()[['feature_importance']].sort_values('feature_importance', ascending=False).index[:50]\n","\n","        fig, ax = plt.subplots(figsize=(max(6, len(order) * .4), 7))\n","        sns.boxenplot(data=feature_importance_df, x='column', y='feature_importance', order=order, ax=ax, palette='viridis')\n","        ax.tick_params(axis='x', rotation=90)\n","        ax.grid()\n","        fig.tight_layout()\n","        return fig,ax\n","\n","class Cat(Base_Model):\n","    def __init__(self, model_params):\n","        self.model_params = model_params\n","        \n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        train_pool = Pool(x_train,\n","                          label=y_train,\n","                          cat_features=cat_col)\n","        valid_pool = Pool(x_valid,\n","                          label=y_valid,\n","                          cat_features=cat_col)\n","\n","        model = CatBoost(self.model_params)\n","        model.fit(train_pool,\n","                  early_stopping_rounds=100,\n","                 plot=False,\n","                 use_best_model=True,\n","                 eval_set=[valid_pool],\n","                  verbose=False)\n","\n","        return model\n","\n","    def predict(self, model, features):\n","      pred = model.predict(features)\n","      return pred\n","\n","class Xgb(Base_Model):\n","    def __init__(self,model_params):\n","        self.model_params = model_params\n","\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        xgb_train = xgb.DMatrix(x_train, label=y_train)\n","        xgb_valid = xgb.DMatrix(x_valid, label=y_valid)\n","\n","        evals = [(xgb_train, 'train'),(xgb_valid, 'eval')]\n","\n","        model = xgb.train(self.model_params,\n","                         xgb_train,\n","                         num_boost_round=2000,\n","                         early_stopping_rounds=100,\n","                         evals=evals,\n","                         verbose_eval=False)\n","\n","        return model\n","\n","    def predict(self, model, features):\n","        return model.predict(xgb.DMatrix(features))\n","\n","class Rid(Base_Model):\n","    def __init__(self):\n","      self.model = None\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        model =Ridge(\n","            alpha=1, #L2係数\n","            max_iter=1000,\n","            random_state=10,\n","                              )\n","        model.fit(x_train, y_train)\n","        return model\n","\n","    def predict(self,model, features):\n","      return model.predict(features)"],"execution_count":71,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VKh8E0relQ5b"},"source":["# Learning"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"sxcr5_p0gMc5","executionInfo":{"status":"error","timestamp":1617633180998,"user_tz":-540,"elapsed":609454,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"d1451930-3591-4e31-9a91-d90a2d3b3612"},"source":["# cat_col =[]\n","# cat_params = {\n","#     'loss_function': 'RMSE',\n","#     'num_boost_round': 10000,\n","#     'depth':6\n","# }\n","\n","# cat_model = Cat(cat_params)\n","# oof_preds_cat, test_preds_cat, evals_results_cat = cat_model.cv(\n","#     y, train_feat_df, test_feat_df, cv\n","# )"],"execution_count":72,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-72-497d4674c43d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mcat_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcat_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m oof_preds_cat, test_preds_cat, evals_results_cat = cat_model.cv(\n\u001b[0;32m---> 10\u001b[0;31m     \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_feat_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_feat_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m )\n","\u001b[0;32m<ipython-input-70-12ac32b38408>\u001b[0m in \u001b[0;36mcv\u001b[0;34m(self, y_train, train_features, test_features, fold_ids)\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mtimer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprefix\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34mf'fit fold={i_fold}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m                 \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_trn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_trn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m             \u001b[0moof_preds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mval_idx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-71-62827d2a5156>\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x_train, y_train, x_valid, y_valid)\u001b[0m\n\u001b[1;32m     62\u001b[0m                  \u001b[0muse_best_model\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m                  \u001b[0meval_set\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mvalid_pool\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m                   verbose=False)\n\u001b[0m\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/catboost/core.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, cat_features, text_features, embedding_features, pairs, sample_weight, group_id, group_weight, subgroup_id, pairs_weight, baseline, use_best_model, eval_set, verbose, logging_level, plot, column_description, verbose_eval, metric_period, silent, early_stopping_rounds, save_snapshot, snapshot_file, snapshot_interval, init_model)\u001b[0m\n\u001b[1;32m   2060\u001b[0m                          \u001b[0mpairs_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbaseline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_best_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meval_set\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogging_level\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2061\u001b[0m                          \u001b[0mcolumn_description\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose_eval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric_period\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msilent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mearly_stopping_rounds\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2062\u001b[0;31m                          save_snapshot, snapshot_file, snapshot_interval, init_model)\n\u001b[0m\u001b[1;32m   2063\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2064\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_process_predict_input_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparent_method_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthread_count\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/catboost/core.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, cat_features, text_features, embedding_features, pairs, sample_weight, group_id, group_weight, subgroup_id, pairs_weight, baseline, use_best_model, eval_set, verbose, logging_level, plot, column_description, verbose_eval, metric_period, silent, early_stopping_rounds, save_snapshot, snapshot_file, snapshot_interval, init_model)\u001b[0m\n\u001b[1;32m   1921\u001b[0m                 \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1922\u001b[0m                 \u001b[0mallow_clear_pool\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1923\u001b[0;31m                 \u001b[0mtrain_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"init_model\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1924\u001b[0m             )\n\u001b[1;32m   1925\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/catboost/core.py\u001b[0m in \u001b[0;36m_train\u001b[0;34m(self, train_pool, test_pool, params, allow_clear_pool, init_model)\u001b[0m\n\u001b[1;32m   1364\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1365\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_train\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_pool\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_pool\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_clear_pool\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minit_model\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1366\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_object\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_train\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_pool\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_pool\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_clear_pool\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minit_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_object\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0minit_model\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1367\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_trained_model_attributes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1368\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m_catboost.pyx\u001b[0m in \u001b[0;36m_catboost._CatBoost._train\u001b[0;34m()\u001b[0m\n","\u001b[0;32m_catboost.pyx\u001b[0m in \u001b[0;36m_catboost._CatBoost._train\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yyixUJg3kZeQ","executionInfo":{"status":"ok","timestamp":1617634695305,"user_tz":-540,"elapsed":1145480,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"f77390ef-bedd-4968-cae5-21538dbbac51"},"source":["lgbm_params = {\n","    \"boosting_type\": \"gbdt\",\n","    'objective': 'regression',\n","    'metric': 'rmse',\n","    'max_depth': 6,\n","    'n_estimators': 10000,\n","    'num_leaves':31,\n","    'learning_rate':0.01,\n","    'colsample_bytree': .5,\n","    \"verbose\":-1\n","}\n","\n","lgbm_model = Lgbm(lgbm_params)\n","oof_preds_lgb, test_preds_lgb, evals_results_lgb = lgbm_model.cv(\n","    y, train_feat_df, test_feat_df, cv\n",")"],"execution_count":84,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=0220.547[s]\n","fold0:RMSLE0.09039789265385371\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=1223.441[s]\n","fold1:RMSLE0.09669450246227439\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=2219.940[s]\n","fold2:RMSLE0.09258634080827886\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=3212.566[s]\n","fold3:RMSLE0.09431581280223633\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=4214.790[s]\n","fold4:RMSLE0.10273023345715845\n","oof score: 0.09543849145390919\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UoHxJ6sxlCbk","executionInfo":{"status":"aborted","timestamp":1617633180995,"user_tz":-540,"elapsed":609445,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# xgb_params = {\n","#     'max_depth': 6,\n","#     'lambda':10, \n","#     'objective': 'reg:squarederror',\n","#     'eval_metric':'rmse',\n","#     'tree_method':'gpu_hist',\n","#     'learning_rate':0.01\n","# }\n","\n","# xgb_model = Xgb(xgb_params)\n","# oof_preds_xgb, test_preds_xgb, evals_results_xgb = xgb_model.cv(\n","#     y, train_feat_df, test_feat_df, cv\n","# )"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13f8dZsClLWw"},"source":["# Stacking"]},{"cell_type":"code","metadata":{"id":"7WkVoaXqlJNU","executionInfo":{"status":"aborted","timestamp":1617633180996,"user_tz":-540,"elapsed":609444,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# stack_train_df = pd.DataFrame([oof_preds_cat, oof_preds_lgb, oof_preds_xgb]).T\n","# stack_test_df = pd.DataFrame([test_preds_cat, test_preds_lgb, test_preds_lgb]).T"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"__yxuNbQltN-","executionInfo":{"status":"aborted","timestamp":1617633180996,"user_tz":-540,"elapsed":609439,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["# stack_model = Rid()\n","# oof_preds_stack, test_preds_stack, evals_results_stack = stack_model.cv(\n","#     y, stack_train_df, stack_test_df, cv\n","# )"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"2KyN-dKmlxsm","executionInfo":{"status":"ok","timestamp":1617634698750,"user_tz":-540,"elapsed":2249,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"195a9063-7f49-4626-876d-1c93dd6aad7a"},"source":["fig, ax = plt.subplots(figsize=(8,8))\n","sns.histplot(y, label='target', kde=True, stat='density', common_norm=False, alpha=0.3, color='orange')\n","sns.histplot(test_preds_lgb, label='test_pred', kde=True, stat='density', common_norm=False, alpha=0.3)\n","sns.histplot(oof_preds_lgb, label='train_pred', kde=True, stat='density', common_norm=False, alpha=0.3, color='red')\n","ax.legend()\n","ax.grid()"],"execution_count":85,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":548},"id":"BV5tckxTpFGM","executionInfo":{"status":"ok","timestamp":1617634699895,"user_tz":-540,"elapsed":3388,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"5881080b-3940-439d-e6d6-9449ea7100b0"},"source":["lgbm_model.visualize_importance()"],"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<Figure size 1440x504 with 1 Axes>,\n"," <matplotlib.axes._subplots.AxesSubplot at 0x7f676fbd55d0>)"]},"metadata":{"tags":[]},"execution_count":86},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x504 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"dEOx8IoRpKx6","executionInfo":{"status":"ok","timestamp":1617634699896,"user_tz":-540,"elapsed":3386,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":["y_sub = np.expm1(test_preds_lgb)\n","submission['LandPrice'] = y_sub\n","\n","submission.to_csv(os.path.join(OUTPUT_DIR, 'sub_' + NB_NAME + '.csv'), index=False)"],"execution_count":87,"outputs":[]},{"cell_type":"code","metadata":{"id":"SGiehgJRqOji","executionInfo":{"status":"aborted","timestamp":1617633180997,"user_tz":-540,"elapsed":609429,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}}},"source":[""],"execution_count":null,"outputs":[]}]}