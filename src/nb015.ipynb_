{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"nb015.ipynb ","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPzXuOKD+Al8R1IyzT+9jcF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"FnmWIfr9vdGK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617632724010,"user_tz":-540,"elapsed":19122,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"f1c030fa-8465-4cb1-d851-d47abc66f22e"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Y-BLRcEexGLR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617632743774,"user_tz":-540,"elapsed":1471,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"db90f04e-4627-4de6-f91f-f52155f07c7f"},"source":["import os\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from matplotlib_venn import venn2\n","#from ptitprince import RainCloud\n","\n","from pandas_profiling import ProfileReport\n","%matplotlib inline\n","pd.set_option('display.max_rows', 50)\n","\n","print(os.getcwd())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4j3OZyeIxG33"},"source":["from lightgbm import LGBMModel\n","from sklearn import model_selection\n","from sklearn.metrics import mean_squared_error\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","from tqdm import tqdm"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oagkY0y3xOTN"},"source":["INPUT_DIR = '/content/drive/MyDrive/Colab Notebooks/Solafune/夜間光データから土地価格を予測/data/inputs/'\n","OUTPUT_DIR = '/content/drive/MyDrive/Colab Notebooks/Solafune/夜間光データから土地価格を予測/data/outputs/'\n","NB_NAME = 'nb014'\n","\n","os.makedirs(OUTPUT_DIR, exist_ok=True)\n","\n","train = pd.read_csv(os.path.join(INPUT_DIR, 'TrainDataSet.csv'))\n","test = pd.read_csv(os.path.join(INPUT_DIR, 'EvaluationData.csv'))\n","submission = pd.read_csv(os.path.join(INPUT_DIR, 'UploadFileTemplate.csv'))\n","target = train['AverageLandPrice']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Pr6T8vaPlYQs"},"source":["# 前処理"]},{"cell_type":"code","metadata":{"id":"CsUPFR6u7pF5"},"source":["# 面積を追加\n","def calc_area(input_df):\n","    output_df = input_df.copy()\n","    output_df['Area'] = input_df['SumLight'] / input_df['MeanLight']\n","    # 小数点以下でずれあるが、測定地域の面積は変わらないはずなので中央値に置き換え\n","    _mapping = output_df.groupby('PlaceID')['Area'].median()\n","    output_df['Area'] = output_df['PlaceID'].map(_mapping)\n","    # NaNがあるので0置き換え\n","    output_df['Area'] = output_df['Area'].fillna(0)\n","    return output_df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UE_r2xl3E5BA"},"source":["train = calc_area(train)\n","test = calc_area(test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"APdaobEolZ2P"},"source":["# 特徴量"]},{"cell_type":"code","metadata":{"id":"gH8HwrzRj7M1"},"source":["class BaseBlock(object):\n","    def fit(self, input_df, y=None):\n","        return self.transform(input_df)\n","\n","    def transform(self, input_df) -> pd.DataFrame:\n","        raise NotImplementedError()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8hBa3vO1P4tM"},"source":["# count 63\n","class Count63Block(BaseBlock):\n","    def transform(self, input_df):\n","        output_df = pd.DataFrame()\n","        output_df['PlaceID'] = input_df['PlaceID'].copy()\n","\n","        _mapping = input_df[input_df['MeanLight'] == 63].groupby('PlaceID').size()\n","        output_df['count63'] = output_df['PlaceID'].map(_mapping).fillna(0)\n","        return output_df['count63']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"j7PWj1jafiX6"},"source":["# aggregationのagg_methodsで使用する関数群\n","# 分位点\n","def third_quartile(x):\n","    return x.quantile(0.75)\n","def first_quartile(x):\n","    return x.quantile(0.25)\n","def quartile_range(x):\n","    return x.quantile(0.75) - x.quantile(0.25)\n","\n","def max_min(x):\n","    return x.max() - x.min()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xwgQdDOsK6wv"},"source":["# agg計算関数(xfeat.aggregation参照)\n","def aggregation(input_df, group_key, group_values, agg_methods):\n","    new_df = []\n","    for agg_method in agg_methods:\n","        for col in group_values:\n","            if callable(agg_method):\n","                agg_method_name = agg_method.__name__\n","            else:\n","                agg_method_name = agg_method\n","            new_col = f\"agg_{agg_method_name}_{col}_grpby_{group_key}\"\n","            df_agg = (input_df[[col] + [group_key]].groupby(group_key)[[col]].agg(agg_method))\n","            df_agg.columns = [new_col]\n","            new_df.append(df_agg)\n","            \n","    _df = pd.concat(new_df, axis=1).reset_index()\n","    output_df = pd.merge(input_df[[group_key]], _df, on=group_key, how=\"left\")\n","    return output_df.drop(group_key, axis=1)\n","\n","\n","# PlaceIDをキーにした集約特徴量\n","class AggPlaceIDBlock(BaseBlock):\n","    def __init__(self, group_values, agg_methods):\n","        self.group_values = group_values\n","        self.agg_methods = agg_methods\n","\n","    def transform(self, input_df):\n","        output_df = aggregation(input_df,\n","                               'PlaceID',\n","                                group_values=self.group_values,\n","                                agg_methods=self.agg_methods)\n","\n","        return output_df\n","\n","\n","# Year をキーにした集約特徴量\n","class AggYearBlock(BaseBlock):\n","    def __init__(self, group_values, agg_methods):\n","        self.group_values = group_values\n","        self.agg_methods = agg_methods\n","\n","    def transform(self, input_df):\n","        output_df = aggregation(input_df,\n","                               'Year',\n","                                group_values=self.group_values,\n","                                agg_methods=self.agg_methods)\n","        return output_df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AvqgiqVpr-Vh"},"source":["# diff計算関数\n","def diff_aggregation(input_df, group_key, group_values, num_diffs):\n","    dfs = []\n","    for nd in num_diffs:\n","        _df = input_df.groupby(group_key)[group_values].diff(nd)\n","        _df.columns = [f'diff={nd}_{col}_grpby_{group_key}' for col in group_values]\n","        dfs.append(_df)\n","    output_df = pd.concat(dfs, axis=1)\n","    return output_df\n","\n","\n","# PlaceID をキーにしたグループ内差分(マイナスからプラスまで差の取り方いっぱいあるな)\n","class LagPlaceIDBlock(BaseBlock):\n","    def __init__(self, group_key, group_values, num_diffs):\n","        self.group_key = group_key\n","        self.group_values = group_values\n","        self.num_diffs = num_diffs\n","    \n","    def transform(self, input_df):\n","        output_df = diff_aggregation(input_df,\n","                                     group_key=self.group_key,\n","                                     group_values=self.group_values,\n","                                     num_diffs=self.num_diffs)\n","        return output_df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"O0j4fo8RPwXv"},"source":["# shift計算関数\n","def shift_aggregation(input_df, group_key, group_values, num_shifts):\n","    dfs = []\n","    for ns in num_shifts:\n","        _df = input_df.groupby(group_key)[group_values].shift(ns)\n","        _df.columns = [f'shift={ns}_{col}_grpby_{group_key}' for col in group_values]\n","        dfs.append(_df)\n","    output_df = pd.concat(dfs, axis=1)\n","    return output_df\n","\n","# PlaceID をキーにしたグループ内シフト\n","# あまり意味ないかもしれない？\n","class ShiftPlaceIDBlock(BaseBlock):\n","    def __init__(self, group_key, group_values, num_shifts):\n","        self.group_key = group_key\n","        self.group_values = group_values\n","        self.num_shifts = num_shifts\n","\n","    def transform(self, input_df):\n","        output_df = shift_aggregation(input_df,\n","                                      self.group_key,\n","                                      self.group_values,\n","                                      self.num_shifts)\n","        return output_df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"maBVzlevPxlc"},"source":["# PCAを単体でするときのコンポーネント数\n","COMPONENT = 16\n","\n","# 主性成分分析する\n","def make_vec_features(input_df, index, columns, values):\n","    all_pca_df = _all_df = pd.DataFrame()\n","    \n","    # valuesそれぞれでpivotしてpca\n","    for val in values:\n","        _df = pd.pivot_table(input_df, index=index, columns=columns, values=val).fillna(0).add_prefix(val + '=')\n","        _all_df = pd.concat([_all_df, _df], axis=1)\n","        sc_df = StandardScaler().fit_transform(_df.fillna(0))\n","        pca = PCA(n_components=COMPONENT, random_state=1993)\n","        pca_df = pd.DataFrame(pca.fit_transform(sc_df), index=_df.index).rename(columns=lambda x: f\"PlaceID_{val}_PCA_{x:03}\")\n","        all_pca_df = pd.concat([all_pca_df, pca_df], axis=1)\n","    # values全部でpca\n","    sc_all_df = StandardScaler().fit_transform(_all_df.fillna(0))\n","    pca = PCA(n_components=COMPONENT * (len(values)+1), random_state=1993)\n","    pca_df = pd.DataFrame(pca.fit_transform(sc_all_df), index=_all_df.index).rename(columns=lambda x:f\"PlaceID_All_PCA_{x:03}\")\n","\n","    all_pca_df= pd.concat([all_pca_df, pca_df], axis=1)\n","    output_df = pd.merge(input_df[[index]], all_pca_df, left_on=index, right_index=True, how='left')\n","    return output_df.drop('PlaceID', axis=1)\n","\n","# pivot tabel を用いた特徴量\n","class PlaceID2VecBlock(BaseBlock):\n","    def __init__(self, index, columns, values):\n","        self.index = index\n","        self.columns = columns\n","        self.values = values\n","\n","    def transform(self, input_df):\n","        return make_vec_features(input_df, self.index, self.columns, self.values)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6i8YlEihPy6_"},"source":["# PlaceIDをキーにしたグループ内相関係数\n","class PlaceIDcorrBlock(BaseBlock):\n","    def __init__(self, group_key, group_values):\n","        self.group_key = group_key\n","        self.group_values = group_values\n","\n","    def transform(self, input_df):\n","        dfs = []\n","        for gv in self.group_values:\n","            _df = input_df.groupby(self.group_key)[gv].corr().unstack().iloc[:, 1].rename(f\"Corr={gv[0]}-{gv[1]}\")\n","            dfs.append(pd.DataFrame(_df))\n","        dfs = pd.concat(dfs, axis=1)\n","        output_df = pd.merge(input_df[[self.group_key]], dfs, left_on=self.group_key, right_index=True, how='left').drop(self.group_key, axis=1)\n","        return output_df      "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PZ_7Px7LkAYA"},"source":["# 各特徴量同士の四則演算?"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"delO9TMY2J5C"},"source":["#SumLightとAreaを順位付け\n","class RankBlock(BaseBlock):\n","    def transform(self, input_df):\n","        _df = []\n","        sumli_rank_df = input_df.groupby('PlaceID')['SumLight'].mean().rank(ascending=False)\n","        area_rank_df = input_df.groupby('PlaceID')['Area'].mean().rank()\n","        _df = pd.concat([sumli_rank_df, area_rank_df], axis=1)\n","        _df.columns = ['SumLight_rank', 'Area_rank']\n","        _df['AreaSumLig_rank'] = ( sumli_rank_df + area_rank_df ) / 2.0\n","\n","        output_df = pd.merge(input_df[['PlaceID']], _df, left_on='PlaceID', right_index=True, how='left')\n","        return output_df.drop('PlaceID', axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IWDBTsRzwbBk"},"source":["# binning\n","class BinningBlock(BaseBlock):\n","    def __init__(self, num_bin, group_key, group_values):\n","        self.num_bin = num_bin\n","        self.group_key = group_key\n","        self.group_values = group_values\n","\n","    def transform(self, input_df):\n","        new_df = []\n","        for gv in self.group_values:\n","            _mean_df = input_df.groupby(self.group_key)[[gv]].mean()\n","            bin = pd.cut(_mean_df[gv], self.num_bin, labels=False).rename(f'Bin_{gv}')\n","            new_df.append(bin)\n","\n","        _df = pd.concat(new_df, axis=1).reset_index()\n","        output_df = pd.merge(input_df[[self.group_key]], _df, on=self.group_key, how='left')\n","        return output_df.drop(self.group_key, axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QebuC3aX43Bk"},"source":["# sum_mean_df = train.groupby('PlaceID')[['SumLight']].mean()\n","# area_mean_df = train.groupby('PlaceID')[['Area']].mean()\n","# df_mean = pd.merge(sum_mean_df, area_mean_df, on='PlaceID', how='left')\n","# df_mean.columns = ['SumLight_mean', 'Area_mean']\n","\n","# bin = pd.cut(df_mean['SumLight_mean'], 10, labels=False).rename('aaa')\n","\n","# #df_mean = pd.merge(train[['PlaceID']], df, on='PlaceID', how='left')\n","\n","# #df.columns = ['SumLight_mean', 'Area_mean']\n","# bin\n","# # a = pd.DataFrame(bin)\n","# # a.columns=['bin_SumLight_mean']\n","# # a"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dPSXCfoi6-K1"},"source":["# bi = BinningBlock(100, 'PlaceID', ['SumLight', 'Area'])\n","# result = bi.transform(train)\n","# result.head(50)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hdUZzcoyq2yp"},"source":["# そのまま使う特徴量\n","class WrapperBlock(BaseBlock):\n","    def __init__(self, function):\n","        self.function = function\n","\n","    def transform(self, input_df):\n","        return self.function(input_df)\n","\n","def origin_features(input_df):\n","    use_columns = [\n","        'Year',\n","        'MeanLight',\n","        'SumLight',\n","        'Area'\n","    ]\n","    return input_df[use_columns]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ol1AYDYaCg38"},"source":["from contextlib import contextmanager\n","from time import time\n","\n","@contextmanager\n","def timer(logger=None,format_str='{:.3f}[s]',prefix=None,suffix=None):\n","    if prefix: format_str = str(prefix) + format_str\n","    if suffix: format_str = format_str + str(suffix)\n","    start = time()\n","    yield\n","    d = time()-start\n","    out_str = format_str.format(d)\n","    if logger:\n","        logger.info(out_str)\n","    else:\n","        print(out_str)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MvfsIFr6eXee"},"source":["from tqdm import tqdm\n","\n","def get_function(block, is_train):\n","    s = mapping = {\n","        True: 'fit',\n","        False: 'transform'\n","    }.get(is_train)\n","    return getattr(block, s)\n","\n","def to_feature(input_df, blocks, is_train=False):\n","    output_df = pd.DataFrame()\n","\n","    for block in tqdm(blocks, total=len(blocks)):\n","        func = get_function(block, is_train)\n","\n","        with timer(prefix='create' + str(block) + ' '):\n","            _df = func(input_df)\n","\n","        assert len(_df) == len(input_df), func.__name__\n","        output_df = pd.concat([output_df, _df], axis=1)\n","\n","    return output_df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KVd6rgWSUxL3","executionInfo":{"status":"ok","timestamp":1617632758453,"user_tz":-540,"elapsed":1680,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"a051ff16-f374-4fb4-b7f8-211f06939b35"},"source":["print(len(train['Area'].value_counts()))\n","print(len(train['SumLight'].value_counts()))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["924\n","6981\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KRDgse1x9p1X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617632777442,"user_tz":-540,"elapsed":20667,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"cdc46bdf-1100-48a5-c4a7-242b8ff28f44"},"source":["agg_methods = [\"min\", \"max\", \"median\", \"mean\", \"std\", max_min,  quartile_range]\n","\n","num_diffs = range(1, 22)\n","num_shifts = range(1, 22)\n","group_vlaues = [\n","    [\"Year\", \"MeanLight\"],\n","    [\"Year\", \"SumLight\"],\n","    [\"Year\", \"Area\"],\n","]         \n","\n","process_blocks = [\n","    WrapperBlock(origin_features),\n","    Count63Block(),\n","    AggPlaceIDBlock([\"MeanLight\", \"SumLight\", \"Area\"], agg_methods),\n","    AggYearBlock([\"MeanLight\", \"SumLight\", \"Area\"], agg_methods),\n","    LagPlaceIDBlock('PlaceID', [\"MeanLight\", \"SumLight\"], num_diffs),\n","    ShiftPlaceIDBlock('PlaceID', [\"MeanLight\", \"SumLight\"], num_shifts),\n","    PlaceID2VecBlock(\"PlaceID\", \"Year\", [\"Area\", \"MeanLight\", \"SumLight\"]),\n","    PlaceIDcorrBlock(\"PlaceID\", group_vlaues),\n","    RankBlock(),\n","    BinningBlock(80, \"PlaceID\", [\"Area\"]),\n","    BinningBlock(500, \"PlaceID\", [\"SumLight\"]),\n","]\n","\n","train_feat_df = to_feature(train, process_blocks, is_train=True)\n","test_feat_df = to_feature(test, process_blocks, is_train=False)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\r  0%|          | 0/11 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.WrapperBlock object at 0x7fd8a3f0c8d0> 0.004[s]\n","create<__main__.Count63Block object at 0x7fd8a3f0cb90> 0.005[s]\n"],"name":"stdout"},{"output_type":"stream","text":[" 36%|███▋      | 4/11 [00:03<00:06,  1.10it/s]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.AggPlaceIDBlock object at 0x7fd8a3f0cdd0> 3.671[s]\n","create<__main__.AggYearBlock object at 0x7fd8a3f0cad0> 0.168[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 45%|████▌     | 5/11 [00:10<00:15,  2.58s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.LagPlaceIDBlock object at 0x7fd8a3f0c7d0> 6.471[s]\n","create<__main__.ShiftPlaceIDBlock object at 0x7fd8a3f0cf90> 0.068[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 64%|██████▎   | 7/11 [00:10<00:07,  1.86s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.PlaceID2VecBlock object at 0x7fd8a3f0c590> 0.239[s]\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 11/11 [00:12<00:00,  1.09s/it]\n","  0%|          | 0/11 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.PlaceIDcorrBlock object at 0x7fd8a3f0c5d0> 1.195[s]\n","create<__main__.RankBlock object at 0x7fd8a3f0c1d0> 0.015[s]\n","create<__main__.BinningBlock object at 0x7fd8a3f0c6d0> 0.009[s]\n","create<__main__.BinningBlock object at 0x7fd8a3f0ccd0> 0.009[s]\n","create<__main__.WrapperBlock object at 0x7fd8a3f0c8d0> 0.002[s]\n","create<__main__.Count63Block object at 0x7fd8a3f0cb90> 0.005[s]\n"],"name":"stdout"},{"output_type":"stream","text":[" 36%|███▋      | 4/11 [00:02<00:04,  1.72it/s]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.AggPlaceIDBlock object at 0x7fd8a3f0cdd0> 2.284[s]\n","create<__main__.AggYearBlock object at 0x7fd8a3f0cad0> 0.145[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 45%|████▌     | 5/11 [00:05<00:08,  1.42s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.LagPlaceIDBlock object at 0x7fd8a3f0c7d0> 3.377[s]\n","create<__main__.ShiftPlaceIDBlock object at 0x7fd8a3f0cf90> 0.063[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\r 64%|██████▎   | 7/11 [00:06<00:04,  1.04s/it]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.PlaceID2VecBlock object at 0x7fd8a3f0c590> 0.173[s]\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 11/11 [00:07<00:00,  1.57it/s]"],"name":"stderr"},{"output_type":"stream","text":["create<__main__.PlaceIDcorrBlock object at 0x7fd8a3f0c5d0> 0.806[s]\n","create<__main__.RankBlock object at 0x7fd8a3f0c1d0> 0.010[s]\n","create<__main__.BinningBlock object at 0x7fd8a3f0c6d0> 0.008[s]\n","create<__main__.BinningBlock object at 0x7fd8a3f0ccd0> 0.008[s]\n"],"name":"stdout"},{"output_type":"stream","text":["\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"baFNIUrKXTZo"},"source":["from sklearn.model_selection import KFold\n","\n","data_temp = train_feat_df[['Bin_Area', 'Bin_SumLight']]\n","data_temp = pd.concat([data_temp, target], axis=1)\n","\n","for c in ['Bin_Area', 'Bin_SumLight']:\n","    target_mean = data_temp.groupby(c)['AverageLandPrice'].mean()\n","    test_feat_df[f'target_{c}'] = test_feat_df[c].map(target_mean)\n","\n","    temp = np.repeat(np.nan, train_feat_df.shape[0])\n","\n","    kf = KFold(n_splits=5, shuffle=True, random_state=71)\n","    for idx_1, idx_2 in kf.split(train_feat_df):\n","        target_mean = data_temp.iloc[idx_1].groupby(c)['AverageLandPrice'].mean()\n","        temp[idx_2] = train_feat_df[c].iloc[idx_2].map(target_mean)\n","\n","    train_feat_df[f'target_{c}'] = temp"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AzgwHGM6tGi3","executionInfo":{"status":"ok","timestamp":1617632777442,"user_tz":-540,"elapsed":20662,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"2cf7115b-e19e-4612-83cb-b044cf696abf"},"source":["train_feat_df.columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Year', 'MeanLight', 'SumLight', 'Area', 'count63',\n","       'agg_min_MeanLight_grpby_PlaceID', 'agg_min_SumLight_grpby_PlaceID',\n","       'agg_min_Area_grpby_PlaceID', 'agg_max_MeanLight_grpby_PlaceID',\n","       'agg_max_SumLight_grpby_PlaceID',\n","       ...\n","       'Corr=Year-MeanLight', 'Corr=Year-SumLight', 'Corr=Year-Area',\n","       'SumLight_rank', 'Area_rank', 'AreaSumLig_rank', 'Bin_Area',\n","       'Bin_SumLight', 'target_Bin_Area', 'target_Bin_SumLight'],\n","      dtype='object', length=253)"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VzEF8L4bQYoo","executionInfo":{"status":"ok","timestamp":1617632777443,"user_tz":-540,"elapsed":20661,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"12b145e6-bcfc-4a5d-be80-095c59715c74"},"source":["train_feat_df.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(21883, 253)"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"eEIzhVw8c9DM"},"source":["# GroupKFold\n","from sklearn.model_selection import KFold\n","\n","fold = KFold(n_splits=5, shuffle=True, random_state=71)\n","cv = list(fold.split(train_feat_df, target))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"67OzIsH_de4D"},"source":["# RMSLE → RMSE\n","y = np.log1p(target)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-nL7KM4VlViv"},"source":["# Model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M00UW7TVfnmG","executionInfo":{"status":"ok","timestamp":1617632788026,"user_tz":-540,"elapsed":31236,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"3bbda695-310f-4efc-c58f-7f015cd04e0a"},"source":["!pip install catboost"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting catboost\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1e/21/d1718eb4c93d6bacdd540b3792187f32ccb1ad9c51b9c4f10875d63ec176/catboost-0.25-cp37-none-manylinux1_x86_64.whl (67.3MB)\n","\u001b[K     |████████████████████████████████| 67.3MB 44kB/s \n","\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from catboost) (1.4.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from catboost) (1.15.0)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from catboost) (0.10.1)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.19.5)\n","Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.1.5)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from catboost) (4.4.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from catboost) (3.2.2)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2.8.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2018.9)\n","Requirement already satisfied: retrying>=1.3.3 in /usr/local/lib/python3.7/dist-packages (from plotly->catboost) (1.3.3)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (0.10.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (2.4.7)\n","Installing collected packages: catboost\n","Successfully installed catboost-0.25\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9y83a_GUfRoP"},"source":["import lightgbm as lgb\n","import xgboost as xgb\n","from catboost import CatBoost\n","from catboost import Pool\n","from sklearn.metrics import mean_squared_error\n","from sklearn.linear_model import Ridge"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AdAzjYUufS3X"},"source":["from abc import abstractmethod\n","class Base_Model(object):\n","    @abstractmethod\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        raise NotImplementedError\n","\n","    @abstractmethod\n","    def predict(self, model, features):\n","        raise NotImplementedError\n","\n","    def cv(self, y_train, train_features, test_features, fold_ids):\n","        test_preds = np.zeros(len(test_features))\n","        oof_preds = np.zeros(len(train_features))\n","\n","        for i_fold, (trn_idx, val_idx) in enumerate(fold_ids):\n","            x_trn = train_features.iloc[trn_idx]\n","            y_trn = y_train[trn_idx]\n","            x_val = train_features.iloc[val_idx]\n","            y_val = y_train[val_idx]\n","\n","            with timer(prefix=f'fit fold={i_fold}'):\n","                model = self.fit(x_trn, y_trn, x_val, y_val)\n","\n","            oof_preds[val_idx] = self.predict(model, x_val)\n","            oof_score = np.sqrt(mean_squared_error(y_val, oof_preds[val_idx]))\n","            print('fold{}:RMSLE{}'.format(i_fold, oof_score))\n","            test_preds += self.predict(model, test_features) / len(fold_ids)\n","\n","        oof_score = np.sqrt(mean_squared_error(y_train, oof_preds))\n","        print(f'oof score: {oof_score}')\n","\n","        evals_results = {\"evals_result\": {\n","            \"oof_score\": oof_score,\n","            \"n_data\": len(train_features),\n","            \"n_features\": len(train_features.columns),\n","        }}\n","\n","        return oof_preds, test_preds, evals_results"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3jgxxQMFfmg7"},"source":["cat_col = []\n","class Lgbm(Base_Model):\n","    def __init__(self, model_params):\n","        self.model_params = model_params\n","        self.models = []\n","        self.feature_cols = None\n","\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        lgb_train = lgb.Dataset(x_train, y_train)\n","        lgb_valid = lgb.Dataset(x_valid, y_valid)\n","\n","        model = lgb.train(self.model_params,\n","            train_set=lgb_train,\n","            valid_sets=[lgb_valid],\n","            valid_names=['valid'],\n","            categorical_feature=cat_col,\n","            early_stopping_rounds=100,\n","            num_boost_round=10000,\n","            verbose_eval=False)\n","        self.models.append(model)\n","        return model\n","\n","    def predict(self, model, features):\n","        self.feature_cols = features.columns\n","        return model.predict(features)\n","\n","    def visualize_importance(self):\n","        feature_importance_df = pd.DataFrame()\n","\n","        for i,model in enumerate(self.models):\n","            _df = pd.DataFrame()\n","            _df['feature_importance'] = model.feature_importance(importance_type='gain')\n","            _df['column'] = self.feature_cols\n","            _df['fold'] = i+1\n","            feature_importance_df = pd.concat([feature_importance_df, _df],axis=0, ignore_index=True)\n","\n","        order = feature_importance_df.groupby('column').sum()[['feature_importance']].sort_values('feature_importance', ascending=False).index[:50]\n","\n","        fig, ax = plt.subplots(figsize=(max(6, len(order) * .4), 7))\n","        sns.boxenplot(data=feature_importance_df, x='column', y='feature_importance', order=order, ax=ax, palette='viridis')\n","        ax.tick_params(axis='x', rotation=90)\n","        ax.grid()\n","        fig.tight_layout()\n","        return fig,ax\n","\n","class Cat(Base_Model):\n","    def __init__(self, model_params):\n","        self.model_params = model_params\n","        \n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        train_pool = Pool(x_train,\n","                          label=y_train,\n","                          cat_features=cat_col)\n","        valid_pool = Pool(x_valid,\n","                          label=y_valid,\n","                          cat_features=cat_col)\n","\n","        model = CatBoost(self.model_params)\n","        model.fit(train_pool,\n","                  early_stopping_rounds=100,\n","                 plot=False,\n","                 use_best_model=True,\n","                 eval_set=[valid_pool],\n","                  verbose=False)\n","\n","        return model\n","\n","    def predict(self, model, features):\n","      pred = model.predict(features)\n","      return pred\n","\n","class Xgb(Base_Model):\n","    def __init__(self,model_params):\n","        self.model_params = model_params\n","\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        xgb_train = xgb.DMatrix(x_train, label=y_train)\n","        xgb_valid = xgb.DMatrix(x_valid, label=y_valid)\n","\n","        evals = [(xgb_train, 'train'),(xgb_valid, 'eval')]\n","\n","        model = xgb.train(self.model_params,\n","                         xgb_train,\n","                         num_boost_round=2000,\n","                         early_stopping_rounds=100,\n","                         evals=evals,\n","                         verbose_eval=False)\n","\n","        return model\n","\n","    def predict(self, model, features):\n","        return model.predict(xgb.DMatrix(features))\n","\n","class Rid(Base_Model):\n","    def __init__(self):\n","      self.model = None\n","    def fit(self, x_train, y_train, x_valid, y_valid):\n","        model =Ridge(\n","            alpha=1, #L2係数\n","            max_iter=1000,\n","            random_state=10,\n","                              )\n","        model.fit(x_train, y_train)\n","        return model\n","\n","    def predict(self,model, features):\n","      return model.predict(features)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VKh8E0relQ5b"},"source":["# Learning"]},{"cell_type":"code","metadata":{"id":"sxcr5_p0gMc5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617636057933,"user_tz":-540,"elapsed":3301134,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"b3042ccc-d474-4b6e-97f0-d3b719a703e3"},"source":["cat_col =[]\n","cat_params = {\n","    'loss_function': 'RMSE',\n","    'num_boost_round': 10000,\n","    'depth':6\n","}\n","\n","cat_model = Cat(cat_params)\n","oof_preds_cat, test_preds_cat, evals_results_cat = cat_model.cv(\n","    y, train_feat_df, test_feat_df, cv\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["fit fold=0657.023[s]\n","fold0:RMSLE0.08673280724138688\n","fit fold=1654.646[s]\n","fold1:RMSLE0.09497861314949436\n","fit fold=2653.391[s]\n","fold2:RMSLE0.08973431909174187\n","fit fold=3652.316[s]\n","fold3:RMSLE0.09304450150202884\n","fit fold=4650.805[s]\n","fold4:RMSLE0.09872599145174075\n","oof score: 0.09273574321030485\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yyixUJg3kZeQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617637114135,"user_tz":-540,"elapsed":4357334,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"5bf42379-de23-4fb4-9f0c-d4a489f803cb"},"source":["lgbm_params = {\n","    \"boosting_type\": \"gbdt\",\n","    'objective': 'regression',\n","    'metric': 'rmse',\n","    'max_depth': 6,\n","    'n_estimators': 10000,\n","    'num_leaves':31,\n","    'learning_rate':0.01,\n","    'colsample_bytree': .5,\n","    \"verbose\":-1\n","}\n","\n","lgbm_model = Lgbm(lgbm_params)\n","oof_preds_lgb, test_preds_lgb, evals_results_lgb = lgbm_model.cv(\n","    y, train_feat_df, test_feat_df, cv\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=0201.071[s]\n","fold0:RMSLE0.09123545790414307\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=1201.468[s]\n","fold1:RMSLE0.09510446608984255\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=2200.716[s]\n","fold2:RMSLE0.09284510815305848\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=3199.227[s]\n","fold3:RMSLE0.09407510534791379\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `n_estimators` in params. Will use it instead of argument\n","  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n","/usr/local/lib/python3.7/dist-packages/lightgbm/basic.py:1209: UserWarning: categorical_feature in Dataset is overridden.\n","New categorical_feature is []\n","  'New categorical_feature is {}'.format(sorted(list(categorical_feature))))\n"],"name":"stderr"},{"output_type":"stream","text":["fit fold=4200.099[s]\n","fold4:RMSLE0.10176650705146421\n","oof score: 0.09507394169789192\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UoHxJ6sxlCbk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617637241753,"user_tz":-540,"elapsed":4484950,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"5c0f553e-2bb5-400d-e922-2872fd8dbfe8"},"source":["xgb_params = {\n","    'max_depth': 6,\n","    'lambda':10, \n","    'objective': 'reg:squarederror',\n","    'eval_metric':'rmse',\n","    'tree_method':'gpu_hist',\n","    'learning_rate':0.01\n","}\n","\n","xgb_model = Xgb(xgb_params)\n","oof_preds_xgb, test_preds_xgb, evals_results_xgb = xgb_model.cv(\n","    y, train_feat_df, test_feat_df, cv\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["fit fold=025.940[s]\n","fold0:RMSLE0.11910311607542982\n","fit fold=124.911[s]\n","fold1:RMSLE0.11774357060348034\n","fit fold=225.130[s]\n","fold2:RMSLE0.11964521831330278\n","fit fold=324.995[s]\n","fold3:RMSLE0.11966897786600277\n","fit fold=424.847[s]\n","fold4:RMSLE0.12847224660882878\n","oof score: 0.12098719538499593\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"13f8dZsClLWw"},"source":["# Stacking"]},{"cell_type":"code","metadata":{"id":"7WkVoaXqlJNU"},"source":["stack_train_df = pd.DataFrame([oof_preds_cat, oof_preds_lgb, oof_preds_xgb]).T\n","stack_test_df = pd.DataFrame([test_preds_cat, test_preds_lgb, test_preds_lgb]).T"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"__yxuNbQltN-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617637243660,"user_tz":-540,"elapsed":4486853,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"90f1c3be-858b-4b04-cbaf-93721551dce9"},"source":["stack_model = Rid()\n","oof_preds_stack, test_preds_stack, evals_results_stack = stack_model.cv(\n","    y, stack_train_df, stack_test_df, cv\n",")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["fit fold=00.007[s]\n","fold0:RMSLE0.08239089692754127\n","fit fold=10.002[s]\n","fold1:RMSLE0.09219414449133048\n","fit fold=20.002[s]\n","fold2:RMSLE0.08515300034471991\n","fit fold=30.002[s]\n","fold3:RMSLE0.08847869785892762\n","fit fold=40.002[s]\n","fold4:RMSLE0.0944767075148481\n","oof score: 0.08864890855962228\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2KyN-dKmlxsm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617637244624,"user_tz":-540,"elapsed":4487815,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"ae7fd791-4f6c-49d0-f2ab-67767f60b8f2"},"source":["fig, ax = plt.subplots(figsize=(8,8))\n","sns.histplot(y, label='target', kde=True, stat='density', common_norm=False, alpha=0.3, color='orange')\n","sns.histplot(test_preds_stack, label='test_pred', kde=True, stat='density', common_norm=False, alpha=0.3)\n","sns.histplot(oof_preds_stack, label='train_pred', kde=True, stat='density', common_norm=False, alpha=0.3, color='red')\n","ax.legend()\n","ax.grid()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 576x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"BV5tckxTpFGM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617637246588,"user_tz":-540,"elapsed":4489774,"user":{"displayName":"おねです","photoUrl":"","userId":"09513891075447620928"}},"outputId":"2bccdb37-164f-4639-e329-9bcf4426d29f"},"source":["lgbm_model.visualize_importance()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<Figure size 1440x504 with 1 Axes>,\n"," <matplotlib.axes._subplots.AxesSubplot at 0x7fd8a22cd7d0>)"]},"metadata":{"tags":[]},"execution_count":41},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x504 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"dEOx8IoRpKx6"},"source":["y_sub = np.expm1(test_preds_stack)\n","submission['LandPrice'] = y_sub\n","\n","submission.to_csv(os.path.join(OUTPUT_DIR, 'sub_' + NB_NAME + '.csv'), index=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SGiehgJRqOji"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"reSmt-2UY8Z6"},"source":["from sklearn.model_selection import KFold\n","\n","# CVのfoldごとにtarget encoding\n","kf = KFold(n_splits=5, shuffle=True, random_state=71)\n","unique_ids = train_feat_df['PlaceID'].unique()\n","\n","result = []\n","\n","for i, (tr_group_idx, va_group_idx) in enumerate(kf.split(unique_ids)):\n","    print(f'---------fold {i}--------')\n","    tr_group, va_group = unique_ids[tr_group_idx], unique_ids[va_group_idx]\n","    train_idx = np.where(train_feat_df['Bin_Area'].isin(tr_group))[0]\n","    val_idx = np.where(train_feat_df['Bin_Area'].isin(va_group))[0]\n","\n","    tr_x, va_x = train_feat_df.iloc[train_idx].copy(), train_feat_df.iloc[val_idx].copy()\n","    tr_y, va_y = target.iloc[train_idx], target.iloc[val_idx]\n","\n","    for c in ['Bin_Area']:\n","        # 学習データ全体で各カテゴリにおけるtargetの平均を計算\n","        data_tmp = pd.DataFrame({c: tr_x[c], 'target': tr_y})\n","        target_mean = data_tmp.groupby(c)['target'].mean()\n","        # バリデーションデータのカテゴリを置換\n","        va_x.loc[:, c] = va_x[c].map(target_mean)\n","\n","        tmp = np.repeat(np.nan, tr_x.shape[0])\n","        kf_encoding = KFold(n_splits=5, shuffle=True, random_state=71)\n","        cv_unique_ids = data_tmp[c].unique()\n","        for i, (idx1, idx2) in enumerate(kf.split(cv_unique_ids)):\n","            tr_idx1 = np.where(data_tmp['Bin_Area'].isin(idx1))[0]\n","            va_idx2 = np.where(data_tmp['Bin_Area'].isin(idx2))[0]\n","            # out-of-foldで各カテゴリにける目的変数の平均を計算\n","            target_mean = data_tmp.iloc[tr_idx1].groupby(c)['target'].mean()\n","            \n","            # 変換後の値を一時配列に格納\n","            tmp[va_idx2] = tr_x[c].iloc[va_idx2].map(target_mean)\n","            tmp[va_idx2] = data_tmp['Bin_Area'].iloc[va_idx2].map(target_mean)\n","\n","        tr_x.loc[:, c] = tmp\n","\n","    #print(tr_x)\n","    result.append((tr_x, va_x))\n","\n","    #yield train_idx, val_idx\n"],"execution_count":null,"outputs":[]}]}